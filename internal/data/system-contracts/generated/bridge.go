// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package generated

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeABI is the input ABI used to generate the binding from.
const BridgeABI = "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_supportedTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_refundGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_depositingAllowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_lockingFundsAllowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_claimingLockedFundsAllowed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_odinAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_tokenPrecision\",\"type\":\"uint8\"}],\"name\":\"ERC20Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_odinAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"ETHDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_refundAmount\",\"type\":\"uint256\"}],\"name\":\"RefundERC20Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_refundAmount\",\"type\":\"uint256\"}],\"name\":\"RefundERC20Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_refundAmount\",\"type\":\"uint256\"}],\"name\":\"RefundETHClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_refundAmount\",\"type\":\"uint256\"}],\"name\":\"RefundETHSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"claimContractERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimableAmount\",\"type\":\"uint256\"}],\"name\":\"claimContractETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"claimLockedERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimableAmount\",\"type\":\"uint256\"}],\"name\":\"claimLockedETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"claimRefundERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRefundETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingLockedFundsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_odinAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"depositERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_odinAddress\",\"type\":\"string\"}],\"name\":\"depositETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositingAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockingFundsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refundERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refundETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowanceToClaimLockedFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowanceToDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowanceToLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_refundAmount\",\"type\":\"uint256\"}],\"name\":\"setRefundERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_refundAmount\",\"type\":\"uint256\"}],\"name\":\"setRefundETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"setRefundGas\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// BridgeBin is the compiled bytecode used for deploying new contracts.
var BridgeBin = ""

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend, _supportedTokens []common.Address, _refundGasLimit *big.Int, _depositingAllowed bool, _lockingFundsAllowed bool, _claimingLockedFundsAllowed bool) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BridgeBin), backend, _supportedTokens, _refundGasLimit, _depositingAllowed, _lockingFundsAllowed, _claimingLockedFundsAllowed)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// ClaimingLockedFundsAllowed is a free data retrieval call binding the contract method 0xaf773ca8.
//
// Solidity: function claimingLockedFundsAllowed() view returns(bool)
func (_Bridge *BridgeCaller) ClaimingLockedFundsAllowed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "claimingLockedFundsAllowed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ClaimingLockedFundsAllowed is a free data retrieval call binding the contract method 0xaf773ca8.
//
// Solidity: function claimingLockedFundsAllowed() view returns(bool)
func (_Bridge *BridgeSession) ClaimingLockedFundsAllowed() (bool, error) {
	return _Bridge.Contract.ClaimingLockedFundsAllowed(&_Bridge.CallOpts)
}

// ClaimingLockedFundsAllowed is a free data retrieval call binding the contract method 0xaf773ca8.
//
// Solidity: function claimingLockedFundsAllowed() view returns(bool)
func (_Bridge *BridgeCallerSession) ClaimingLockedFundsAllowed() (bool, error) {
	return _Bridge.Contract.ClaimingLockedFundsAllowed(&_Bridge.CallOpts)
}

// DepositingAllowed is a free data retrieval call binding the contract method 0x5b7f7ba3.
//
// Solidity: function depositingAllowed() view returns(bool)
func (_Bridge *BridgeCaller) DepositingAllowed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "depositingAllowed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// DepositingAllowed is a free data retrieval call binding the contract method 0x5b7f7ba3.
//
// Solidity: function depositingAllowed() view returns(bool)
func (_Bridge *BridgeSession) DepositingAllowed() (bool, error) {
	return _Bridge.Contract.DepositingAllowed(&_Bridge.CallOpts)
}

// DepositingAllowed is a free data retrieval call binding the contract method 0x5b7f7ba3.
//
// Solidity: function depositingAllowed() view returns(bool)
func (_Bridge *BridgeCallerSession) DepositingAllowed() (bool, error) {
	return _Bridge.Contract.DepositingAllowed(&_Bridge.CallOpts)
}

// LockedERC20 is a free data retrieval call binding the contract method 0xd35b7801.
//
// Solidity: function lockedERC20(address , address ) view returns(uint256)
func (_Bridge *BridgeCaller) LockedERC20(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "lockedERC20", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LockedERC20 is a free data retrieval call binding the contract method 0xd35b7801.
//
// Solidity: function lockedERC20(address , address ) view returns(uint256)
func (_Bridge *BridgeSession) LockedERC20(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Bridge.Contract.LockedERC20(&_Bridge.CallOpts, arg0, arg1)
}

// LockedERC20 is a free data retrieval call binding the contract method 0xd35b7801.
//
// Solidity: function lockedERC20(address , address ) view returns(uint256)
func (_Bridge *BridgeCallerSession) LockedERC20(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Bridge.Contract.LockedERC20(&_Bridge.CallOpts, arg0, arg1)
}

// LockedETH is a free data retrieval call binding the contract method 0x0d55f6b2.
//
// Solidity: function lockedETH(address ) view returns(uint256)
func (_Bridge *BridgeCaller) LockedETH(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "lockedETH", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LockedETH is a free data retrieval call binding the contract method 0x0d55f6b2.
//
// Solidity: function lockedETH(address ) view returns(uint256)
func (_Bridge *BridgeSession) LockedETH(arg0 common.Address) (*big.Int, error) {
	return _Bridge.Contract.LockedETH(&_Bridge.CallOpts, arg0)
}

// LockedETH is a free data retrieval call binding the contract method 0x0d55f6b2.
//
// Solidity: function lockedETH(address ) view returns(uint256)
func (_Bridge *BridgeCallerSession) LockedETH(arg0 common.Address) (*big.Int, error) {
	return _Bridge.Contract.LockedETH(&_Bridge.CallOpts, arg0)
}

// LockingFundsAllowed is a free data retrieval call binding the contract method 0xfcc591d3.
//
// Solidity: function lockingFundsAllowed() view returns(bool)
func (_Bridge *BridgeCaller) LockingFundsAllowed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "lockingFundsAllowed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// LockingFundsAllowed is a free data retrieval call binding the contract method 0xfcc591d3.
//
// Solidity: function lockingFundsAllowed() view returns(bool)
func (_Bridge *BridgeSession) LockingFundsAllowed() (bool, error) {
	return _Bridge.Contract.LockingFundsAllowed(&_Bridge.CallOpts)
}

// LockingFundsAllowed is a free data retrieval call binding the contract method 0xfcc591d3.
//
// Solidity: function lockingFundsAllowed() view returns(bool)
func (_Bridge *BridgeCallerSession) LockingFundsAllowed() (bool, error) {
	return _Bridge.Contract.LockingFundsAllowed(&_Bridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeSession) Owner() (common.Address, error) {
	return _Bridge.Contract.Owner(&_Bridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeCallerSession) Owner() (common.Address, error) {
	return _Bridge.Contract.Owner(&_Bridge.CallOpts)
}

// RefundERC20 is a free data retrieval call binding the contract method 0x6978a413.
//
// Solidity: function refundERC20(address , address ) view returns(uint256 fee, uint256 amount)
func (_Bridge *BridgeCaller) RefundERC20(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (struct {
	Fee    *big.Int
	Amount *big.Int
}, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "refundERC20", arg0, arg1)

	outstruct := new(struct {
		Fee    *big.Int
		Amount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fee = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Amount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// RefundERC20 is a free data retrieval call binding the contract method 0x6978a413.
//
// Solidity: function refundERC20(address , address ) view returns(uint256 fee, uint256 amount)
func (_Bridge *BridgeSession) RefundERC20(arg0 common.Address, arg1 common.Address) (struct {
	Fee    *big.Int
	Amount *big.Int
}, error) {
	return _Bridge.Contract.RefundERC20(&_Bridge.CallOpts, arg0, arg1)
}

// RefundERC20 is a free data retrieval call binding the contract method 0x6978a413.
//
// Solidity: function refundERC20(address , address ) view returns(uint256 fee, uint256 amount)
func (_Bridge *BridgeCallerSession) RefundERC20(arg0 common.Address, arg1 common.Address) (struct {
	Fee    *big.Int
	Amount *big.Int
}, error) {
	return _Bridge.Contract.RefundERC20(&_Bridge.CallOpts, arg0, arg1)
}

// RefundETH is a free data retrieval call binding the contract method 0x1cf6e5b4.
//
// Solidity: function refundETH(address ) view returns(uint256 fee, uint256 amount)
func (_Bridge *BridgeCaller) RefundETH(opts *bind.CallOpts, arg0 common.Address) (struct {
	Fee    *big.Int
	Amount *big.Int
}, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "refundETH", arg0)

	outstruct := new(struct {
		Fee    *big.Int
		Amount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fee = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Amount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// RefundETH is a free data retrieval call binding the contract method 0x1cf6e5b4.
//
// Solidity: function refundETH(address ) view returns(uint256 fee, uint256 amount)
func (_Bridge *BridgeSession) RefundETH(arg0 common.Address) (struct {
	Fee    *big.Int
	Amount *big.Int
}, error) {
	return _Bridge.Contract.RefundETH(&_Bridge.CallOpts, arg0)
}

// RefundETH is a free data retrieval call binding the contract method 0x1cf6e5b4.
//
// Solidity: function refundETH(address ) view returns(uint256 fee, uint256 amount)
func (_Bridge *BridgeCallerSession) RefundETH(arg0 common.Address) (struct {
	Fee    *big.Int
	Amount *big.Int
}, error) {
	return _Bridge.Contract.RefundETH(&_Bridge.CallOpts, arg0)
}

// SupportedTokens is a free data retrieval call binding the contract method 0x68c4ac26.
//
// Solidity: function supportedTokens(address ) view returns(bool)
func (_Bridge *BridgeCaller) SupportedTokens(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "supportedTokens", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportedTokens is a free data retrieval call binding the contract method 0x68c4ac26.
//
// Solidity: function supportedTokens(address ) view returns(bool)
func (_Bridge *BridgeSession) SupportedTokens(arg0 common.Address) (bool, error) {
	return _Bridge.Contract.SupportedTokens(&_Bridge.CallOpts, arg0)
}

// SupportedTokens is a free data retrieval call binding the contract method 0x68c4ac26.
//
// Solidity: function supportedTokens(address ) view returns(bool)
func (_Bridge *BridgeCallerSession) SupportedTokens(arg0 common.Address) (bool, error) {
	return _Bridge.Contract.SupportedTokens(&_Bridge.CallOpts, arg0)
}

// AddToken is a paid mutator transaction binding the contract method 0xd48bfca7.
//
// Solidity: function addToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactor) AddToken(opts *bind.TransactOpts, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "addToken", _tokenAddress)
}

// AddToken is a paid mutator transaction binding the contract method 0xd48bfca7.
//
// Solidity: function addToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeSession) AddToken(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AddToken(&_Bridge.TransactOpts, _tokenAddress)
}

// AddToken is a paid mutator transaction binding the contract method 0xd48bfca7.
//
// Solidity: function addToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactorSession) AddToken(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AddToken(&_Bridge.TransactOpts, _tokenAddress)
}

// ClaimContractERC20 is a paid mutator transaction binding the contract method 0xfe0dde62.
//
// Solidity: function claimContractERC20(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactor) ClaimContractERC20(opts *bind.TransactOpts, _claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claimContractERC20", _claimableAmount, _tokenAddress)
}

// ClaimContractERC20 is a paid mutator transaction binding the contract method 0xfe0dde62.
//
// Solidity: function claimContractERC20(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeSession) ClaimContractERC20(_claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimContractERC20(&_Bridge.TransactOpts, _claimableAmount, _tokenAddress)
}

// ClaimContractERC20 is a paid mutator transaction binding the contract method 0xfe0dde62.
//
// Solidity: function claimContractERC20(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactorSession) ClaimContractERC20(_claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimContractERC20(&_Bridge.TransactOpts, _claimableAmount, _tokenAddress)
}

// ClaimContractETH is a paid mutator transaction binding the contract method 0x3155c58a.
//
// Solidity: function claimContractETH(uint256 _claimableAmount) returns(bool)
func (_Bridge *BridgeTransactor) ClaimContractETH(opts *bind.TransactOpts, _claimableAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claimContractETH", _claimableAmount)
}

// ClaimContractETH is a paid mutator transaction binding the contract method 0x3155c58a.
//
// Solidity: function claimContractETH(uint256 _claimableAmount) returns(bool)
func (_Bridge *BridgeSession) ClaimContractETH(_claimableAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimContractETH(&_Bridge.TransactOpts, _claimableAmount)
}

// ClaimContractETH is a paid mutator transaction binding the contract method 0x3155c58a.
//
// Solidity: function claimContractETH(uint256 _claimableAmount) returns(bool)
func (_Bridge *BridgeTransactorSession) ClaimContractETH(_claimableAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimContractETH(&_Bridge.TransactOpts, _claimableAmount)
}

// ClaimLockedERC20 is a paid mutator transaction binding the contract method 0xf99f28ee.
//
// Solidity: function claimLockedERC20(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactor) ClaimLockedERC20(opts *bind.TransactOpts, _claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claimLockedERC20", _claimableAmount, _tokenAddress)
}

// ClaimLockedERC20 is a paid mutator transaction binding the contract method 0xf99f28ee.
//
// Solidity: function claimLockedERC20(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeSession) ClaimLockedERC20(_claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimLockedERC20(&_Bridge.TransactOpts, _claimableAmount, _tokenAddress)
}

// ClaimLockedERC20 is a paid mutator transaction binding the contract method 0xf99f28ee.
//
// Solidity: function claimLockedERC20(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactorSession) ClaimLockedERC20(_claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimLockedERC20(&_Bridge.TransactOpts, _claimableAmount, _tokenAddress)
}

// ClaimLockedETH is a paid mutator transaction binding the contract method 0x49ca86d5.
//
// Solidity: function claimLockedETH(uint256 _claimableAmount) returns(bool)
func (_Bridge *BridgeTransactor) ClaimLockedETH(opts *bind.TransactOpts, _claimableAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claimLockedETH", _claimableAmount)
}

// ClaimLockedETH is a paid mutator transaction binding the contract method 0x49ca86d5.
//
// Solidity: function claimLockedETH(uint256 _claimableAmount) returns(bool)
func (_Bridge *BridgeSession) ClaimLockedETH(_claimableAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimLockedETH(&_Bridge.TransactOpts, _claimableAmount)
}

// ClaimLockedETH is a paid mutator transaction binding the contract method 0x49ca86d5.
//
// Solidity: function claimLockedETH(uint256 _claimableAmount) returns(bool)
func (_Bridge *BridgeTransactorSession) ClaimLockedETH(_claimableAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimLockedETH(&_Bridge.TransactOpts, _claimableAmount)
}

// ClaimRefundERC20 is a paid mutator transaction binding the contract method 0xcf515f64.
//
// Solidity: function claimRefundERC20(address _tokenAddress) payable returns(bool)
func (_Bridge *BridgeTransactor) ClaimRefundERC20(opts *bind.TransactOpts, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claimRefundERC20", _tokenAddress)
}

// ClaimRefundERC20 is a paid mutator transaction binding the contract method 0xcf515f64.
//
// Solidity: function claimRefundERC20(address _tokenAddress) payable returns(bool)
func (_Bridge *BridgeSession) ClaimRefundERC20(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimRefundERC20(&_Bridge.TransactOpts, _tokenAddress)
}

// ClaimRefundERC20 is a paid mutator transaction binding the contract method 0xcf515f64.
//
// Solidity: function claimRefundERC20(address _tokenAddress) payable returns(bool)
func (_Bridge *BridgeTransactorSession) ClaimRefundERC20(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimRefundERC20(&_Bridge.TransactOpts, _tokenAddress)
}

// ClaimRefundETH is a paid mutator transaction binding the contract method 0xbcfaf506.
//
// Solidity: function claimRefundETH() payable returns(bool)
func (_Bridge *BridgeTransactor) ClaimRefundETH(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claimRefundETH")
}

// ClaimRefundETH is a paid mutator transaction binding the contract method 0xbcfaf506.
//
// Solidity: function claimRefundETH() payable returns(bool)
func (_Bridge *BridgeSession) ClaimRefundETH() (*types.Transaction, error) {
	return _Bridge.Contract.ClaimRefundETH(&_Bridge.TransactOpts)
}

// ClaimRefundETH is a paid mutator transaction binding the contract method 0xbcfaf506.
//
// Solidity: function claimRefundETH() payable returns(bool)
func (_Bridge *BridgeTransactorSession) ClaimRefundETH() (*types.Transaction, error) {
	return _Bridge.Contract.ClaimRefundETH(&_Bridge.TransactOpts)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x7288f11a.
//
// Solidity: function depositERC20(address _tokenAddress, string _odinAddress, uint256 _depositAmount) payable returns(bool)
func (_Bridge *BridgeTransactor) DepositERC20(opts *bind.TransactOpts, _tokenAddress common.Address, _odinAddress string, _depositAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "depositERC20", _tokenAddress, _odinAddress, _depositAmount)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x7288f11a.
//
// Solidity: function depositERC20(address _tokenAddress, string _odinAddress, uint256 _depositAmount) payable returns(bool)
func (_Bridge *BridgeSession) DepositERC20(_tokenAddress common.Address, _odinAddress string, _depositAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.DepositERC20(&_Bridge.TransactOpts, _tokenAddress, _odinAddress, _depositAmount)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x7288f11a.
//
// Solidity: function depositERC20(address _tokenAddress, string _odinAddress, uint256 _depositAmount) payable returns(bool)
func (_Bridge *BridgeTransactorSession) DepositERC20(_tokenAddress common.Address, _odinAddress string, _depositAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.DepositERC20(&_Bridge.TransactOpts, _tokenAddress, _odinAddress, _depositAmount)
}

// DepositETH is a paid mutator transaction binding the contract method 0x9b1c48e6.
//
// Solidity: function depositETH(string _odinAddress) payable returns(bool)
func (_Bridge *BridgeTransactor) DepositETH(opts *bind.TransactOpts, _odinAddress string) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "depositETH", _odinAddress)
}

// DepositETH is a paid mutator transaction binding the contract method 0x9b1c48e6.
//
// Solidity: function depositETH(string _odinAddress) payable returns(bool)
func (_Bridge *BridgeSession) DepositETH(_odinAddress string) (*types.Transaction, error) {
	return _Bridge.Contract.DepositETH(&_Bridge.TransactOpts, _odinAddress)
}

// DepositETH is a paid mutator transaction binding the contract method 0x9b1c48e6.
//
// Solidity: function depositETH(string _odinAddress) payable returns(bool)
func (_Bridge *BridgeTransactorSession) DepositETH(_odinAddress string) (*types.Transaction, error) {
	return _Bridge.Contract.DepositETH(&_Bridge.TransactOpts, _odinAddress)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactor) RemoveToken(opts *bind.TransactOpts, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "removeToken", _tokenAddress)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeSession) RemoveToken(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RemoveToken(&_Bridge.TransactOpts, _tokenAddress)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactorSession) RemoveToken(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RemoveToken(&_Bridge.TransactOpts, _tokenAddress)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bridge.Contract.RenounceOwnership(&_Bridge.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bridge.Contract.RenounceOwnership(&_Bridge.TransactOpts)
}

// SetAllowanceToClaimLockedFunds is a paid mutator transaction binding the contract method 0x8ef37c48.
//
// Solidity: function setAllowanceToClaimLockedFunds(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactor) SetAllowanceToClaimLockedFunds(opts *bind.TransactOpts, _allowed bool) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setAllowanceToClaimLockedFunds", _allowed)
}

// SetAllowanceToClaimLockedFunds is a paid mutator transaction binding the contract method 0x8ef37c48.
//
// Solidity: function setAllowanceToClaimLockedFunds(bool _allowed) returns(bool)
func (_Bridge *BridgeSession) SetAllowanceToClaimLockedFunds(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToClaimLockedFunds(&_Bridge.TransactOpts, _allowed)
}

// SetAllowanceToClaimLockedFunds is a paid mutator transaction binding the contract method 0x8ef37c48.
//
// Solidity: function setAllowanceToClaimLockedFunds(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactorSession) SetAllowanceToClaimLockedFunds(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToClaimLockedFunds(&_Bridge.TransactOpts, _allowed)
}

// SetAllowanceToDeposit is a paid mutator transaction binding the contract method 0xd0fd1de1.
//
// Solidity: function setAllowanceToDeposit(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactor) SetAllowanceToDeposit(opts *bind.TransactOpts, _allowed bool) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setAllowanceToDeposit", _allowed)
}

// SetAllowanceToDeposit is a paid mutator transaction binding the contract method 0xd0fd1de1.
//
// Solidity: function setAllowanceToDeposit(bool _allowed) returns(bool)
func (_Bridge *BridgeSession) SetAllowanceToDeposit(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToDeposit(&_Bridge.TransactOpts, _allowed)
}

// SetAllowanceToDeposit is a paid mutator transaction binding the contract method 0xd0fd1de1.
//
// Solidity: function setAllowanceToDeposit(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactorSession) SetAllowanceToDeposit(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToDeposit(&_Bridge.TransactOpts, _allowed)
}

// SetAllowanceToLock is a paid mutator transaction binding the contract method 0xa8d275cc.
//
// Solidity: function setAllowanceToLock(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactor) SetAllowanceToLock(opts *bind.TransactOpts, _allowed bool) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setAllowanceToLock", _allowed)
}

// SetAllowanceToLock is a paid mutator transaction binding the contract method 0xa8d275cc.
//
// Solidity: function setAllowanceToLock(bool _allowed) returns(bool)
func (_Bridge *BridgeSession) SetAllowanceToLock(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToLock(&_Bridge.TransactOpts, _allowed)
}

// SetAllowanceToLock is a paid mutator transaction binding the contract method 0xa8d275cc.
//
// Solidity: function setAllowanceToLock(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactorSession) SetAllowanceToLock(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToLock(&_Bridge.TransactOpts, _allowed)
}

// SetRefundERC20 is a paid mutator transaction binding the contract method 0x9d9a553b.
//
// Solidity: function setRefundERC20(address _userAddress, address _tokenAddress, uint256 _refundAmount) returns(bool)
func (_Bridge *BridgeTransactor) SetRefundERC20(opts *bind.TransactOpts, _userAddress common.Address, _tokenAddress common.Address, _refundAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setRefundERC20", _userAddress, _tokenAddress, _refundAmount)
}

// SetRefundERC20 is a paid mutator transaction binding the contract method 0x9d9a553b.
//
// Solidity: function setRefundERC20(address _userAddress, address _tokenAddress, uint256 _refundAmount) returns(bool)
func (_Bridge *BridgeSession) SetRefundERC20(_userAddress common.Address, _tokenAddress common.Address, _refundAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.SetRefundERC20(&_Bridge.TransactOpts, _userAddress, _tokenAddress, _refundAmount)
}

// SetRefundERC20 is a paid mutator transaction binding the contract method 0x9d9a553b.
//
// Solidity: function setRefundERC20(address _userAddress, address _tokenAddress, uint256 _refundAmount) returns(bool)
func (_Bridge *BridgeTransactorSession) SetRefundERC20(_userAddress common.Address, _tokenAddress common.Address, _refundAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.SetRefundERC20(&_Bridge.TransactOpts, _userAddress, _tokenAddress, _refundAmount)
}

// SetRefundETH is a paid mutator transaction binding the contract method 0x144a8c47.
//
// Solidity: function setRefundETH(address _userAddress, uint256 _refundAmount) returns(bool)
func (_Bridge *BridgeTransactor) SetRefundETH(opts *bind.TransactOpts, _userAddress common.Address, _refundAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setRefundETH", _userAddress, _refundAmount)
}

// SetRefundETH is a paid mutator transaction binding the contract method 0x144a8c47.
//
// Solidity: function setRefundETH(address _userAddress, uint256 _refundAmount) returns(bool)
func (_Bridge *BridgeSession) SetRefundETH(_userAddress common.Address, _refundAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.SetRefundETH(&_Bridge.TransactOpts, _userAddress, _refundAmount)
}

// SetRefundETH is a paid mutator transaction binding the contract method 0x144a8c47.
//
// Solidity: function setRefundETH(address _userAddress, uint256 _refundAmount) returns(bool)
func (_Bridge *BridgeTransactorSession) SetRefundETH(_userAddress common.Address, _refundAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.SetRefundETH(&_Bridge.TransactOpts, _userAddress, _refundAmount)
}

// SetRefundGas is a paid mutator transaction binding the contract method 0xb782be5a.
//
// Solidity: function setRefundGas(uint256 _gas) returns(bool)
func (_Bridge *BridgeTransactor) SetRefundGas(opts *bind.TransactOpts, _gas *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setRefundGas", _gas)
}

// SetRefundGas is a paid mutator transaction binding the contract method 0xb782be5a.
//
// Solidity: function setRefundGas(uint256 _gas) returns(bool)
func (_Bridge *BridgeSession) SetRefundGas(_gas *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.SetRefundGas(&_Bridge.TransactOpts, _gas)
}

// SetRefundGas is a paid mutator transaction binding the contract method 0xb782be5a.
//
// Solidity: function setRefundGas(uint256 _gas) returns(bool)
func (_Bridge *BridgeTransactorSession) SetRefundGas(_gas *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.SetRefundGas(&_Bridge.TransactOpts, _gas)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOwnership(&_Bridge.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOwnership(&_Bridge.TransactOpts, newOwner)
}

// BridgeERC20DepositedIterator is returned from FilterERC20Deposited and is used to iterate over the raw logs and unpacked data for ERC20Deposited events raised by the Bridge contract.
type BridgeERC20DepositedIterator struct {
	Event *BridgeERC20Deposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeERC20DepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeERC20Deposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeERC20Deposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeERC20DepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeERC20DepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeERC20Deposited represents a ERC20Deposited event raised by the Bridge contract.
type BridgeERC20Deposited struct {
	UserAddress    common.Address
	OdinAddress    string
	DepositAmount  *big.Int
	TokenAddress   common.Address
	Symbol         string
	TokenPrecision uint8
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterERC20Deposited is a free log retrieval operation binding the contract event 0x380818a686b3749c864e4fe5b344c0fd3e0681231881695473b42c2c84d7271d.
//
// Solidity: event ERC20Deposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount, address indexed _tokenAddress, string _symbol, uint8 _tokenPrecision)
func (_Bridge *BridgeFilterer) FilterERC20Deposited(opts *bind.FilterOpts, _userAddress []common.Address, _tokenAddress []common.Address) (*BridgeERC20DepositedIterator, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ERC20Deposited", _userAddressRule, _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeERC20DepositedIterator{contract: _Bridge.contract, event: "ERC20Deposited", logs: logs, sub: sub}, nil
}

// WatchERC20Deposited is a free log subscription operation binding the contract event 0x380818a686b3749c864e4fe5b344c0fd3e0681231881695473b42c2c84d7271d.
//
// Solidity: event ERC20Deposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount, address indexed _tokenAddress, string _symbol, uint8 _tokenPrecision)
func (_Bridge *BridgeFilterer) WatchERC20Deposited(opts *bind.WatchOpts, sink chan<- *BridgeERC20Deposited, _userAddress []common.Address, _tokenAddress []common.Address) (event.Subscription, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ERC20Deposited", _userAddressRule, _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeERC20Deposited)
				if err := _Bridge.contract.UnpackLog(event, "ERC20Deposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseERC20Deposited is a log parse operation binding the contract event 0x380818a686b3749c864e4fe5b344c0fd3e0681231881695473b42c2c84d7271d.
//
// Solidity: event ERC20Deposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount, address indexed _tokenAddress, string _symbol, uint8 _tokenPrecision)
func (_Bridge *BridgeFilterer) ParseERC20Deposited(log types.Log) (*BridgeERC20Deposited, error) {
	event := new(BridgeERC20Deposited)
	if err := _Bridge.contract.UnpackLog(event, "ERC20Deposited", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeETHDepositedIterator is returned from FilterETHDeposited and is used to iterate over the raw logs and unpacked data for ETHDeposited events raised by the Bridge contract.
type BridgeETHDepositedIterator struct {
	Event *BridgeETHDeposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeETHDepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeETHDeposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeETHDeposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeETHDepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeETHDepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeETHDeposited represents a ETHDeposited event raised by the Bridge contract.
type BridgeETHDeposited struct {
	UserAddress   common.Address
	OdinAddress   string
	DepositAmount *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterETHDeposited is a free log retrieval operation binding the contract event 0xa5ee847b808915e440e213630058643951dfa817cd585254162b8e69b71fa432.
//
// Solidity: event ETHDeposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount)
func (_Bridge *BridgeFilterer) FilterETHDeposited(opts *bind.FilterOpts, _userAddress []common.Address) (*BridgeETHDepositedIterator, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ETHDeposited", _userAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeETHDepositedIterator{contract: _Bridge.contract, event: "ETHDeposited", logs: logs, sub: sub}, nil
}

// WatchETHDeposited is a free log subscription operation binding the contract event 0xa5ee847b808915e440e213630058643951dfa817cd585254162b8e69b71fa432.
//
// Solidity: event ETHDeposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount)
func (_Bridge *BridgeFilterer) WatchETHDeposited(opts *bind.WatchOpts, sink chan<- *BridgeETHDeposited, _userAddress []common.Address) (event.Subscription, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ETHDeposited", _userAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeETHDeposited)
				if err := _Bridge.contract.UnpackLog(event, "ETHDeposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseETHDeposited is a log parse operation binding the contract event 0xa5ee847b808915e440e213630058643951dfa817cd585254162b8e69b71fa432.
//
// Solidity: event ETHDeposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount)
func (_Bridge *BridgeFilterer) ParseETHDeposited(log types.Log) (*BridgeETHDeposited, error) {
	event := new(BridgeETHDeposited)
	if err := _Bridge.contract.UnpackLog(event, "ETHDeposited", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Bridge contract.
type BridgeOwnershipTransferredIterator struct {
	Event *BridgeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeOwnershipTransferred represents a OwnershipTransferred event raised by the Bridge contract.
type BridgeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BridgeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeOwnershipTransferredIterator{contract: _Bridge.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BridgeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeOwnershipTransferred)
				if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) ParseOwnershipTransferred(log types.Log) (*BridgeOwnershipTransferred, error) {
	event := new(BridgeOwnershipTransferred)
	if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeRefundERC20ClaimedIterator is returned from FilterRefundERC20Claimed and is used to iterate over the raw logs and unpacked data for RefundERC20Claimed events raised by the Bridge contract.
type BridgeRefundERC20ClaimedIterator struct {
	Event *BridgeRefundERC20Claimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRefundERC20ClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRefundERC20Claimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRefundERC20Claimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRefundERC20ClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRefundERC20ClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRefundERC20Claimed represents a RefundERC20Claimed event raised by the Bridge contract.
type BridgeRefundERC20Claimed struct {
	UserAddress  common.Address
	TokenAddress common.Address
	RefundAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRefundERC20Claimed is a free log retrieval operation binding the contract event 0x9eb96357c2d508007cfd4592c39fb297b6d5785d098dba44f439a6b7c0c09c85.
//
// Solidity: event RefundERC20Claimed(address indexed _userAddress, address indexed _tokenAddress, uint256 _refundAmount)
func (_Bridge *BridgeFilterer) FilterRefundERC20Claimed(opts *bind.FilterOpts, _userAddress []common.Address, _tokenAddress []common.Address) (*BridgeRefundERC20ClaimedIterator, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}
	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RefundERC20Claimed", _userAddressRule, _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRefundERC20ClaimedIterator{contract: _Bridge.contract, event: "RefundERC20Claimed", logs: logs, sub: sub}, nil
}

// WatchRefundERC20Claimed is a free log subscription operation binding the contract event 0x9eb96357c2d508007cfd4592c39fb297b6d5785d098dba44f439a6b7c0c09c85.
//
// Solidity: event RefundERC20Claimed(address indexed _userAddress, address indexed _tokenAddress, uint256 _refundAmount)
func (_Bridge *BridgeFilterer) WatchRefundERC20Claimed(opts *bind.WatchOpts, sink chan<- *BridgeRefundERC20Claimed, _userAddress []common.Address, _tokenAddress []common.Address) (event.Subscription, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}
	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RefundERC20Claimed", _userAddressRule, _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRefundERC20Claimed)
				if err := _Bridge.contract.UnpackLog(event, "RefundERC20Claimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefundERC20Claimed is a log parse operation binding the contract event 0x9eb96357c2d508007cfd4592c39fb297b6d5785d098dba44f439a6b7c0c09c85.
//
// Solidity: event RefundERC20Claimed(address indexed _userAddress, address indexed _tokenAddress, uint256 _refundAmount)
func (_Bridge *BridgeFilterer) ParseRefundERC20Claimed(log types.Log) (*BridgeRefundERC20Claimed, error) {
	event := new(BridgeRefundERC20Claimed)
	if err := _Bridge.contract.UnpackLog(event, "RefundERC20Claimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeRefundERC20SetIterator is returned from FilterRefundERC20Set and is used to iterate over the raw logs and unpacked data for RefundERC20Set events raised by the Bridge contract.
type BridgeRefundERC20SetIterator struct {
	Event *BridgeRefundERC20Set // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRefundERC20SetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRefundERC20Set)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRefundERC20Set)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRefundERC20SetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRefundERC20SetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRefundERC20Set represents a RefundERC20Set event raised by the Bridge contract.
type BridgeRefundERC20Set struct {
	UserAddress  common.Address
	TokenAddress common.Address
	RefundAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRefundERC20Set is a free log retrieval operation binding the contract event 0x10b263a17c00e2929bb1147482721734601e45e3ff0fcb9c27f4eb6b5cde6223.
//
// Solidity: event RefundERC20Set(address indexed _userAddress, address indexed _tokenAddress, uint256 _refundAmount)
func (_Bridge *BridgeFilterer) FilterRefundERC20Set(opts *bind.FilterOpts, _userAddress []common.Address, _tokenAddress []common.Address) (*BridgeRefundERC20SetIterator, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}
	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RefundERC20Set", _userAddressRule, _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRefundERC20SetIterator{contract: _Bridge.contract, event: "RefundERC20Set", logs: logs, sub: sub}, nil
}

// WatchRefundERC20Set is a free log subscription operation binding the contract event 0x10b263a17c00e2929bb1147482721734601e45e3ff0fcb9c27f4eb6b5cde6223.
//
// Solidity: event RefundERC20Set(address indexed _userAddress, address indexed _tokenAddress, uint256 _refundAmount)
func (_Bridge *BridgeFilterer) WatchRefundERC20Set(opts *bind.WatchOpts, sink chan<- *BridgeRefundERC20Set, _userAddress []common.Address, _tokenAddress []common.Address) (event.Subscription, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}
	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RefundERC20Set", _userAddressRule, _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRefundERC20Set)
				if err := _Bridge.contract.UnpackLog(event, "RefundERC20Set", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefundERC20Set is a log parse operation binding the contract event 0x10b263a17c00e2929bb1147482721734601e45e3ff0fcb9c27f4eb6b5cde6223.
//
// Solidity: event RefundERC20Set(address indexed _userAddress, address indexed _tokenAddress, uint256 _refundAmount)
func (_Bridge *BridgeFilterer) ParseRefundERC20Set(log types.Log) (*BridgeRefundERC20Set, error) {
	event := new(BridgeRefundERC20Set)
	if err := _Bridge.contract.UnpackLog(event, "RefundERC20Set", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeRefundETHClaimedIterator is returned from FilterRefundETHClaimed and is used to iterate over the raw logs and unpacked data for RefundETHClaimed events raised by the Bridge contract.
type BridgeRefundETHClaimedIterator struct {
	Event *BridgeRefundETHClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRefundETHClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRefundETHClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRefundETHClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRefundETHClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRefundETHClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRefundETHClaimed represents a RefundETHClaimed event raised by the Bridge contract.
type BridgeRefundETHClaimed struct {
	UserAddress  common.Address
	RefundAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRefundETHClaimed is a free log retrieval operation binding the contract event 0xd154ad5f55396c2cbc059f9f698c96517e06f525b479fa153c8daf2c041d28d7.
//
// Solidity: event RefundETHClaimed(address indexed _userAddress, uint256 _refundAmount)
func (_Bridge *BridgeFilterer) FilterRefundETHClaimed(opts *bind.FilterOpts, _userAddress []common.Address) (*BridgeRefundETHClaimedIterator, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RefundETHClaimed", _userAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRefundETHClaimedIterator{contract: _Bridge.contract, event: "RefundETHClaimed", logs: logs, sub: sub}, nil
}

// WatchRefundETHClaimed is a free log subscription operation binding the contract event 0xd154ad5f55396c2cbc059f9f698c96517e06f525b479fa153c8daf2c041d28d7.
//
// Solidity: event RefundETHClaimed(address indexed _userAddress, uint256 _refundAmount)
func (_Bridge *BridgeFilterer) WatchRefundETHClaimed(opts *bind.WatchOpts, sink chan<- *BridgeRefundETHClaimed, _userAddress []common.Address) (event.Subscription, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RefundETHClaimed", _userAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRefundETHClaimed)
				if err := _Bridge.contract.UnpackLog(event, "RefundETHClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefundETHClaimed is a log parse operation binding the contract event 0xd154ad5f55396c2cbc059f9f698c96517e06f525b479fa153c8daf2c041d28d7.
//
// Solidity: event RefundETHClaimed(address indexed _userAddress, uint256 _refundAmount)
func (_Bridge *BridgeFilterer) ParseRefundETHClaimed(log types.Log) (*BridgeRefundETHClaimed, error) {
	event := new(BridgeRefundETHClaimed)
	if err := _Bridge.contract.UnpackLog(event, "RefundETHClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeRefundETHSetIterator is returned from FilterRefundETHSet and is used to iterate over the raw logs and unpacked data for RefundETHSet events raised by the Bridge contract.
type BridgeRefundETHSetIterator struct {
	Event *BridgeRefundETHSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRefundETHSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRefundETHSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRefundETHSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRefundETHSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRefundETHSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRefundETHSet represents a RefundETHSet event raised by the Bridge contract.
type BridgeRefundETHSet struct {
	UserAddress  common.Address
	RefundAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRefundETHSet is a free log retrieval operation binding the contract event 0x7b0cef12c6b83b7bc097f44643cc994050d856d9acd8a36f826532903364c1d1.
//
// Solidity: event RefundETHSet(address indexed _userAddress, uint256 _refundAmount)
func (_Bridge *BridgeFilterer) FilterRefundETHSet(opts *bind.FilterOpts, _userAddress []common.Address) (*BridgeRefundETHSetIterator, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RefundETHSet", _userAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRefundETHSetIterator{contract: _Bridge.contract, event: "RefundETHSet", logs: logs, sub: sub}, nil
}

// WatchRefundETHSet is a free log subscription operation binding the contract event 0x7b0cef12c6b83b7bc097f44643cc994050d856d9acd8a36f826532903364c1d1.
//
// Solidity: event RefundETHSet(address indexed _userAddress, uint256 _refundAmount)
func (_Bridge *BridgeFilterer) WatchRefundETHSet(opts *bind.WatchOpts, sink chan<- *BridgeRefundETHSet, _userAddress []common.Address) (event.Subscription, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RefundETHSet", _userAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRefundETHSet)
				if err := _Bridge.contract.UnpackLog(event, "RefundETHSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefundETHSet is a log parse operation binding the contract event 0x7b0cef12c6b83b7bc097f44643cc994050d856d9acd8a36f826532903364c1d1.
//
// Solidity: event RefundETHSet(address indexed _userAddress, uint256 _refundAmount)
func (_Bridge *BridgeFilterer) ParseRefundETHSet(log types.Log) (*BridgeRefundETHSet, error) {
	event := new(BridgeRefundETHSet)
	if err := _Bridge.contract.UnpackLog(event, "RefundETHSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTokenAddedIterator is returned from FilterTokenAdded and is used to iterate over the raw logs and unpacked data for TokenAdded events raised by the Bridge contract.
type BridgeTokenAddedIterator struct {
	Event *BridgeTokenAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTokenAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTokenAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTokenAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTokenAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTokenAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTokenAdded represents a TokenAdded event raised by the Bridge contract.
type BridgeTokenAdded struct {
	TokenAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterTokenAdded is a free log retrieval operation binding the contract event 0x784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a4.
//
// Solidity: event TokenAdded(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) FilterTokenAdded(opts *bind.FilterOpts, _tokenAddress []common.Address) (*BridgeTokenAddedIterator, error) {

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "TokenAdded", _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeTokenAddedIterator{contract: _Bridge.contract, event: "TokenAdded", logs: logs, sub: sub}, nil
}

// WatchTokenAdded is a free log subscription operation binding the contract event 0x784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a4.
//
// Solidity: event TokenAdded(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) WatchTokenAdded(opts *bind.WatchOpts, sink chan<- *BridgeTokenAdded, _tokenAddress []common.Address) (event.Subscription, error) {

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "TokenAdded", _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTokenAdded)
				if err := _Bridge.contract.UnpackLog(event, "TokenAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenAdded is a log parse operation binding the contract event 0x784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a4.
//
// Solidity: event TokenAdded(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) ParseTokenAdded(log types.Log) (*BridgeTokenAdded, error) {
	event := new(BridgeTokenAdded)
	if err := _Bridge.contract.UnpackLog(event, "TokenAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTokenRemovedIterator is returned from FilterTokenRemoved and is used to iterate over the raw logs and unpacked data for TokenRemoved events raised by the Bridge contract.
type BridgeTokenRemovedIterator struct {
	Event *BridgeTokenRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTokenRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTokenRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTokenRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTokenRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTokenRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTokenRemoved represents a TokenRemoved event raised by the Bridge contract.
type BridgeTokenRemoved struct {
	TokenAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterTokenRemoved is a free log retrieval operation binding the contract event 0x4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3.
//
// Solidity: event TokenRemoved(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) FilterTokenRemoved(opts *bind.FilterOpts, _tokenAddress []common.Address) (*BridgeTokenRemovedIterator, error) {

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "TokenRemoved", _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeTokenRemovedIterator{contract: _Bridge.contract, event: "TokenRemoved", logs: logs, sub: sub}, nil
}

// WatchTokenRemoved is a free log subscription operation binding the contract event 0x4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3.
//
// Solidity: event TokenRemoved(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) WatchTokenRemoved(opts *bind.WatchOpts, sink chan<- *BridgeTokenRemoved, _tokenAddress []common.Address) (event.Subscription, error) {

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "TokenRemoved", _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTokenRemoved)
				if err := _Bridge.contract.UnpackLog(event, "TokenRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenRemoved is a log parse operation binding the contract event 0x4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3.
//
// Solidity: event TokenRemoved(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) ParseTokenRemoved(log types.Log) (*BridgeTokenRemoved, error) {
	event := new(BridgeTokenRemoved)
	if err := _Bridge.contract.UnpackLog(event, "TokenRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
