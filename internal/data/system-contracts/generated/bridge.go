// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package generated

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeABI is the input ABI used to generate the binding from.
const BridgeABI = "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_supportedTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_refundGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_depositingAllowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_lockingFundsAllowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_claimingLockedFundsAllowed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_lockedAmount\",\"type\":\"uint256\"}],\"name\":\"LockedTokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_refundAmount\",\"type\":\"uint256\"}],\"name\":\"RefundClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_refundAmount\",\"type\":\"uint256\"}],\"name\":\"RefundSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_odinAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_tokenPrecision\",\"type\":\"uint8\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_odinAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_tokenPrecision\",\"type\":\"uint8\"}],\"name\":\"TokensLocked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"claimContractTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"claimLockedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"claimRefund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingLockedFundsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_odinAddress\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositingAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockingFundsAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowanceToClaimLockedFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowanceToDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowanceToLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_refundAmount\",\"type\":\"uint256\"}],\"name\":\"setRefund\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gas\",\"type\":\"uint256\"}],\"name\":\"setRefundGas\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// BridgeBin is the compiled bytecode used for deploying new contracts.
var BridgeBin = "0x60806040523480156200001157600080fd5b506040516200358b3803806200358b8339818101604052810190620000379190620002f2565b6000620000496200020360201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35060005b8551811015620001a35760016003600088848151811062000134577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806200019a9062000465565b915050620000ea565b508360018190555082600260006101000a81548160ff02191690831515021790555081600260016101000a81548160ff021916908315150217905550806002806101000a81548160ff021916908315150217905550505050505062000570565b600033905090565b6000620002226200021c84620003b6565b6200038d565b905080838252602082019050828560208602820111156200024257600080fd5b60005b858110156200027657816200025b888262000280565b84526020840193506020830192505060018101905062000245565b5050509392505050565b600081519050620002918162000522565b92915050565b600082601f830112620002a957600080fd5b8151620002bb8482602086016200020b565b91505092915050565b600081519050620002d5816200053c565b92915050565b600081519050620002ec8162000556565b92915050565b600080600080600060a086880312156200030b57600080fd5b600086015167ffffffffffffffff8111156200032657600080fd5b620003348882890162000297565b95505060206200034788828901620002db565b94505060406200035a88828901620002c4565b93505060606200036d88828901620002c4565b92505060806200038088828901620002c4565b9150509295509295909350565b600062000399620003ac565b9050620003a782826200042f565b919050565b6000604051905090565b600067ffffffffffffffff821115620003d457620003d3620004e2565b5b602082029050602081019050919050565b6000620003f28262000405565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6200043a8262000511565b810181811067ffffffffffffffff821117156200045c576200045b620004e2565b5b80604052505050565b6000620004728262000425565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620004a857620004a7620004b3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6200052d81620003e5565b81146200053957600080fd5b50565b6200054781620003f9565b81146200055357600080fd5b50565b620005618162000425565b81146200056d57600080fd5b50565b61300b80620005806000396000f3fe60806040526004361061011f5760003560e01c80638da5cb5b116100a0578063bffa55d511610064578063bffa55d51461045c578063d0fd1de11461048c578063d48bfca7146104c9578063f2fde38b14610506578063fcc591d31461052f5761011f565b80638da5cb5b1461034f5780638ef37c481461037a578063a8d275cc146103b7578063af773ca8146103f4578063b782be5a1461041f5761011f565b80635e30b8a6116100e75780635e30b8a6146102435780635fa7b5841461028157806361f355b3146102be57806368c4ac26146102fb578063715018a6146103385761011f565b80630774e00314610124578063100f0333146101615780631adadda81461019e5780632a48ac9a146101db5780635b7f7ba314610218575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190612225565b61055a565b6040516101589190612978565b60405180910390f35b34801561016d57600080fd5b50610188600480360381019061018391906123d3565b61057f565b604051610195919061274a565b60405180910390f35b3480156101aa57600080fd5b506101c560048036038101906101c091906121fc565b6106d9565b6040516101d2919061274a565b60405180910390f35b3480156101e757600080fd5b5061020260048036038101906101fd9190612343565b6109ad565b60405161020f919061274a565b60405180910390f35b34801561022457600080fd5b5061022d610fc6565b60405161023a919061274a565b60405180910390f35b34801561024f57600080fd5b5061026a60048036038101906102659190612225565b610fd9565b604051610278929190612993565b60405180910390f35b34801561028d57600080fd5b506102a860048036038101906102a391906121fc565b61100a565b6040516102b5919061274a565b60405180910390f35b3480156102ca57600080fd5b506102e560048036038101906102e09190612261565b61112c565b6040516102f2919061274a565b60405180910390f35b34801561030757600080fd5b50610322600480360381019061031d91906121fc565b6114c7565b60405161032f919061274a565b60405180910390f35b34801561034457600080fd5b5061034d6114e7565b005b34801561035b57600080fd5b50610364611621565b60405161037191906126cf565b60405180910390f35b34801561038657600080fd5b506103a1600480360381019061039c91906122b0565b61164a565b6040516103ae919061274a565b60405180910390f35b3480156103c357600080fd5b506103de60048036038101906103d991906122b0565b61173e565b6040516103eb919061274a565b60405180910390f35b34801561040057600080fd5b50610409611835565b604051610416919061274a565b60405180910390f35b34801561042b57600080fd5b50610446600480360381019061044191906123aa565b611846565b604051610453919061274a565b60405180910390f35b610476600480360381019061047191906121fc565b6118d4565b604051610483919061274a565b60405180910390f35b34801561049857600080fd5b506104b360048036038101906104ae91906122b0565b611c91565b6040516104c0919061274a565b60405180910390f35b3480156104d557600080fd5b506104f060048036038101906104eb91906121fc565b611d88565b6040516104fd919061274a565b60405180910390f35b34801561051257600080fd5b5061052d600480360381019061052891906121fc565b611eaa565b005b34801561053b57600080fd5b50610544612053565b604051610551919061274a565b60405180910390f35b6005602052816000526040600020602052806000526040600020600091509150505481565b6000610589612066565b73ffffffffffffffffffffffffffffffffffffffff166105a7611621565b73ffffffffffffffffffffffffffffffffffffffff16146105fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f4906128b8565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b815260040161063a929190612721565b602060405180830381600087803b15801561065457600080fd5b505af1158015610668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068c91906122d9565b9050806106ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c590612838565b60405180910390fd5b600191505092915050565b600060028054906101000a900460ff16610728576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071f90612918565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081116107ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e390612938565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610829929190612721565b602060405180830381600087803b15801561084357600080fd5b505af1158015610857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087b91906122d9565b9050806108bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b4906127f8565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f3cbe8d2fc92222d9e96654938e27f342d0e47034e80d48415aac29f001bd7f098460405161091a9190612978565b60405180910390a3600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009055600192505050919050565b6000600260009054906101000a900460ff166109fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f5906127b8565b60405180910390fd5b610a1d8373ffffffffffffffffffffffffffffffffffffffff1661206e565b610a5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5390612878565b60405180910390fd5b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610ae8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610adf906128d8565b60405180910390fd5b600083905060008173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610b2c939291906126ea565b602060405180830381600087803b158015610b4657600080fd5b505af1158015610b5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7e91906122d9565b905080610bc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb7906128f8565b60405180910390fd5b600260019054906101000a900460ff1615610e4f57610c6484600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461208190919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f9db88e69bec1736ae639740137aa6d9fae763473a8377a4fd30d6b7df9f7227788878673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610d7b57600080fd5b505afa158015610d8f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610db89190612302565b8773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610dfe57600080fd5b505afa158015610e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e36919061240f565b604051610e469493929190612765565b60405180910390a35b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f3e143f8fba8031d7acf9c756e1bd2e6ceae2887f358df89f06dd01322aa5e8f488878673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610ee657600080fd5b505afa158015610efa573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610f239190612302565b8773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015610f6957600080fd5b505afa158015610f7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa1919061240f565b604051610fb19493929190612765565b60405180910390a36001925050509392505050565b600260009054906101000a900460ff1681565b6004602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b6000611014612066565b73ffffffffffffffffffffffffffffffffffffffff16611032611621565b73ffffffffffffffffffffffffffffffffffffffff1614611088576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107f906128b8565b60405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd360405160405180910390a260019050919050565b6000611136612066565b73ffffffffffffffffffffffffffffffffffffffff16611154611621565b73ffffffffffffffffffffffffffffffffffffffff16146111aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a1906128b8565b60405180910390fd5b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905061126083826020015161208190919063ffffffff16565b8160200181815250506112946112816001543a61209790919063ffffffff16565b826000015161208190919063ffffffff16565b81600001818152505080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010155905050600260019054906101000a900460ff1615611456576113d583600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120ad90919063ffffffff16565b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f44c29c6a804074ee7d8b37a2822a80057f6d7ae3aa50cf26fd103ba45f706a12856040516114b39190612978565b60405180910390a360019150509392505050565b60036020528060005260406000206000915054906101000a900460ff1681565b6114ef612066565b73ffffffffffffffffffffffffffffffffffffffff1661150d611621565b73ffffffffffffffffffffffffffffffffffffffff1614611563576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155a906128b8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000611654612066565b73ffffffffffffffffffffffffffffffffffffffff16611672611621565b73ffffffffffffffffffffffffffffffffffffffff16146116c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116bf906128b8565b60405180910390fd5b81151560028054906101000a900460ff161515141561171c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171390612818565b60405180910390fd5b816002806101000a81548160ff02191690831515021790555060019050919050565b6000611748612066565b73ffffffffffffffffffffffffffffffffffffffff16611766611621565b73ffffffffffffffffffffffffffffffffffffffff16146117bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b3906128b8565b60405180910390fd5b811515600260019054906101000a900460ff1615151415611812576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180990612818565b60405180910390fd5b81600260016101000a81548160ff02191690831515021790555060019050919050565b60028054906101000a900460ff1681565b6000611850612066565b73ffffffffffffffffffffffffffffffffffffffff1661186e611621565b73ffffffffffffffffffffffffffffffffffffffff16146118c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118bb906128b8565b60405180910390fd5b8160018190555060019050919050565b600080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050905060008160000151116119bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119b290612898565b60405180910390fd5b8060000151341015611a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f990612858565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3384602001516040518363ffffffff1660e01b8152600401611a43929190612721565b602060405180830381600087803b158015611a5d57600080fd5b505af1158015611a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9591906122d9565b905080611ad7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ace906127f8565b60405180910390fd5b611adf611621565b73ffffffffffffffffffffffffffffffffffffffff168260000151604051611b06906126ba565b60006040518083038185875af1925050503d8060008114611b43576040519150601f19603f3d011682016040523d82523d6000602084013e611b48565b606091505b50508091505080611b8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8590612958565b60405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f39bed68a008a68cbf907d7ff6bc3629912af6516cb837cfa3f871ad9f2b8a9448460200151604051611bef9190612978565b60405180910390a3600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000905560018201600090555050600192505050919050565b6000611c9b612066565b73ffffffffffffffffffffffffffffffffffffffff16611cb9611621565b73ffffffffffffffffffffffffffffffffffffffff1614611d0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d06906128b8565b60405180910390fd5b811515600260009054906101000a900460ff1615151415611d65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5c90612818565b60405180910390fd5b81600260006101000a81548160ff02191690831515021790555060019050919050565b6000611d92612066565b73ffffffffffffffffffffffffffffffffffffffff16611db0611621565b73ffffffffffffffffffffffffffffffffffffffff1614611e06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dfd906128b8565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a460405160405180910390a260019050919050565b611eb2612066565b73ffffffffffffffffffffffffffffffffffffffff16611ed0611621565b73ffffffffffffffffffffffffffffffffffffffff1614611f26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1d906128b8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611f96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8d906127d8565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260019054906101000a900460ff1681565b600033905090565b600080823b905060008111915050919050565b6000818361208f9190612a39565b905092915050565b600081836120a59190612a8f565b905092915050565b600081836120bb9190612ae9565b905092915050565b60006120d66120d1846129e1565b6129bc565b9050828152602081018484840111156120ee57600080fd5b6120f9848285612b72565b509392505050565b600061211461210f846129e1565b6129bc565b90508281526020810184848401111561212c57600080fd5b612137848285612b81565b509392505050565b60008135905061214e81612f79565b92915050565b60008135905061216381612f90565b92915050565b60008151905061217881612f90565b92915050565b600082601f83011261218f57600080fd5b813561219f8482602086016120c3565b91505092915050565b600082601f8301126121b957600080fd5b81516121c9848260208601612101565b91505092915050565b6000813590506121e181612fa7565b92915050565b6000815190506121f681612fbe565b92915050565b60006020828403121561220e57600080fd5b600061221c8482850161213f565b91505092915050565b6000806040838503121561223857600080fd5b60006122468582860161213f565b92505060206122578582860161213f565b9150509250929050565b60008060006060848603121561227657600080fd5b60006122848682870161213f565b93505060206122958682870161213f565b92505060406122a6868287016121d2565b9150509250925092565b6000602082840312156122c257600080fd5b60006122d084828501612154565b91505092915050565b6000602082840312156122eb57600080fd5b60006122f984828501612169565b91505092915050565b60006020828403121561231457600080fd5b600082015167ffffffffffffffff81111561232e57600080fd5b61233a848285016121a8565b91505092915050565b60008060006060848603121561235857600080fd5b600084013567ffffffffffffffff81111561237257600080fd5b61237e8682870161217e565b935050602061238f8682870161213f565b92505060406123a0868287016121d2565b9150509250925092565b6000602082840312156123bc57600080fd5b60006123ca848285016121d2565b91505092915050565b600080604083850312156123e657600080fd5b60006123f4858286016121d2565b92505060206124058582860161213f565b9150509250929050565b60006020828403121561242157600080fd5b600061242f848285016121e7565b91505092915050565b61244181612b1d565b82525050565b61245081612b2f565b82525050565b600061246182612a12565b61246b8185612a28565b935061247b818560208601612b81565b61248481612c43565b840191505092915050565b600061249c601d83612a28565b91506124a782612c54565b602082019050919050565b60006124bf602683612a28565b91506124ca82612c7d565b604082019050919050565b60006124e2602083612a28565b91506124ed82612ccc565b602082019050919050565b6000612505602783612a28565b915061251082612cf5565b604082019050919050565b6000612528602283612a28565b915061253382612d44565b604082019050919050565b600061254b601883612a28565b915061255682612d93565b602082019050919050565b600061256e601e83612a28565b915061257982612dbc565b602082019050919050565b6000612591601383612a28565b915061259c82612de5565b602082019050919050565b60006125b4602083612a28565b91506125bf82612e0e565b602082019050919050565b60006125d7602583612a28565b91506125e282612e37565b604082019050919050565b60006125fa601a83612a28565b915061260582612e86565b602082019050919050565b600061261d600083612a1d565b915061262882612eaf565b600082019050919050565b6000612640602883612a28565b915061264b82612eb2565b604082019050919050565b6000612663601383612a28565b915061266e82612f01565b602082019050919050565b6000612686602f83612a28565b915061269182612f2a565b604082019050919050565b6126a581612b5b565b82525050565b6126b481612b65565b82525050565b60006126c582612610565b9150819050919050565b60006020820190506126e46000830184612438565b92915050565b60006060820190506126ff6000830186612438565b61270c6020830185612438565b612719604083018461269c565b949350505050565b60006040820190506127366000830185612438565b612743602083018461269c565b9392505050565b600060208201905061275f6000830184612447565b92915050565b6000608082019050818103600083015261277f8187612456565b905061278e602083018661269c565b81810360408301526127a08185612456565b90506127af60608301846126ab565b95945050505050565b600060208201905081810360008301526127d18161248f565b9050919050565b600060208201905081810360008301526127f1816124b2565b9050919050565b60006020820190508181036000830152612811816124d5565b9050919050565b60006020820190508181036000830152612831816124f8565b9050919050565b600060208201905081810360008301526128518161251b565b9050919050565b600060208201905081810360008301526128718161253e565b9050919050565b6000602082019050818103600083015261289181612561565b9050919050565b600060208201905081810360008301526128b181612584565b9050919050565b600060208201905081810360008301526128d1816125a7565b9050919050565b600060208201905081810360008301526128f1816125ca565b9050919050565b60006020820190508181036000830152612911816125ed565b9050919050565b6000602082019050818103600083015261293181612633565b9050919050565b6000602082019050818103600083015261295181612656565b9050919050565b6000602082019050818103600083015261297181612679565b9050919050565b600060208201905061298d600083018461269c565b92915050565b60006040820190506129a8600083018561269c565b6129b5602083018461269c565b9392505050565b60006129c66129d7565b90506129d28282612bb4565b919050565b6000604051905090565b600067ffffffffffffffff8211156129fc576129fb612c14565b5b612a0582612c43565b9050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000612a4482612b5b565b9150612a4f83612b5b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612a8457612a83612be5565b5b828201905092915050565b6000612a9a82612b5b565b9150612aa583612b5b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612ade57612add612be5565b5b828202905092915050565b6000612af482612b5b565b9150612aff83612b5b565b925082821015612b1257612b11612be5565b5b828203905092915050565b6000612b2882612b3b565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015612b9f578082015181840152602081019050612b84565b83811115612bae576000848401525b50505050565b612bbd82612c43565b810181811067ffffffffffffffff82111715612bdc57612bdb612c14565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4974206973206e6f7420616c6c6f77656420746f206465706f7369742e000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f207472616e73666572206c6f636b65642045524332302e600082015250565b7f547279696e6720746f20736574207468652073616d6520706172616d6574657260008201527f2076616c75652e00000000000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f207472616e7366657220636c61696d656420616d6f756e60008201527f742e000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e73756666696369656e7420726566756e64206665652e0000000000000000600082015250565b7f476976656e20746f6b656e206973206e6f74206120636f6e74726163742e0000600082015250565b7f5a65726f20726566756e6420616d6f756e742e00000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f556e737570706f7274656420746f6b656e2c206661696c656420746f2064657060008201527f6f7369742e000000000000000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f207472616e7366657220746f6b656e732e000000000000600082015250565b50565b7f4974206973206e6f7420616c6c6f77656420746f20636c61696d206c6f636b6560008201527f642066756e64732e000000000000000000000000000000000000000000000000602082015250565b7f5a65726f206c6f636b656420616d6f756e742e00000000000000000000000000600082015250565b7f4661696c656420746f207061792074686520636f6d70656e736174696f6e206660008201527f6f7220706179696e67206261636b2e0000000000000000000000000000000000602082015250565b612f8281612b1d565b8114612f8d57600080fd5b50565b612f9981612b2f565b8114612fa457600080fd5b50565b612fb081612b5b565b8114612fbb57600080fd5b50565b612fc781612b65565b8114612fd257600080fd5b5056fea26469706673582212203582105c15418d645ed579beb6bc09979aec633f7c4c9ff122b0e7df6d0d0c7e64736f6c63430008030033"

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend, _supportedTokens []common.Address, _refundGasLimit *big.Int, _depositingAllowed bool, _lockingFundsAllowed bool, _claimingLockedFundsAllowed bool) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BridgeBin), backend, _supportedTokens, _refundGasLimit, _depositingAllowed, _lockingFundsAllowed, _claimingLockedFundsAllowed)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// ClaimingLockedFundsAllowed is a free data retrieval call binding the contract method 0xaf773ca8.
//
// Solidity: function claimingLockedFundsAllowed() view returns(bool)
func (_Bridge *BridgeCaller) ClaimingLockedFundsAllowed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "claimingLockedFundsAllowed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ClaimingLockedFundsAllowed is a free data retrieval call binding the contract method 0xaf773ca8.
//
// Solidity: function claimingLockedFundsAllowed() view returns(bool)
func (_Bridge *BridgeSession) ClaimingLockedFundsAllowed() (bool, error) {
	return _Bridge.Contract.ClaimingLockedFundsAllowed(&_Bridge.CallOpts)
}

// ClaimingLockedFundsAllowed is a free data retrieval call binding the contract method 0xaf773ca8.
//
// Solidity: function claimingLockedFundsAllowed() view returns(bool)
func (_Bridge *BridgeCallerSession) ClaimingLockedFundsAllowed() (bool, error) {
	return _Bridge.Contract.ClaimingLockedFundsAllowed(&_Bridge.CallOpts)
}

// DepositingAllowed is a free data retrieval call binding the contract method 0x5b7f7ba3.
//
// Solidity: function depositingAllowed() view returns(bool)
func (_Bridge *BridgeCaller) DepositingAllowed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "depositingAllowed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// DepositingAllowed is a free data retrieval call binding the contract method 0x5b7f7ba3.
//
// Solidity: function depositingAllowed() view returns(bool)
func (_Bridge *BridgeSession) DepositingAllowed() (bool, error) {
	return _Bridge.Contract.DepositingAllowed(&_Bridge.CallOpts)
}

// DepositingAllowed is a free data retrieval call binding the contract method 0x5b7f7ba3.
//
// Solidity: function depositingAllowed() view returns(bool)
func (_Bridge *BridgeCallerSession) DepositingAllowed() (bool, error) {
	return _Bridge.Contract.DepositingAllowed(&_Bridge.CallOpts)
}

// LockedTokens is a free data retrieval call binding the contract method 0x0774e003.
//
// Solidity: function lockedTokens(address , address ) view returns(uint256)
func (_Bridge *BridgeCaller) LockedTokens(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "lockedTokens", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LockedTokens is a free data retrieval call binding the contract method 0x0774e003.
//
// Solidity: function lockedTokens(address , address ) view returns(uint256)
func (_Bridge *BridgeSession) LockedTokens(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Bridge.Contract.LockedTokens(&_Bridge.CallOpts, arg0, arg1)
}

// LockedTokens is a free data retrieval call binding the contract method 0x0774e003.
//
// Solidity: function lockedTokens(address , address ) view returns(uint256)
func (_Bridge *BridgeCallerSession) LockedTokens(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Bridge.Contract.LockedTokens(&_Bridge.CallOpts, arg0, arg1)
}

// LockingFundsAllowed is a free data retrieval call binding the contract method 0xfcc591d3.
//
// Solidity: function lockingFundsAllowed() view returns(bool)
func (_Bridge *BridgeCaller) LockingFundsAllowed(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "lockingFundsAllowed")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// LockingFundsAllowed is a free data retrieval call binding the contract method 0xfcc591d3.
//
// Solidity: function lockingFundsAllowed() view returns(bool)
func (_Bridge *BridgeSession) LockingFundsAllowed() (bool, error) {
	return _Bridge.Contract.LockingFundsAllowed(&_Bridge.CallOpts)
}

// LockingFundsAllowed is a free data retrieval call binding the contract method 0xfcc591d3.
//
// Solidity: function lockingFundsAllowed() view returns(bool)
func (_Bridge *BridgeCallerSession) LockingFundsAllowed() (bool, error) {
	return _Bridge.Contract.LockingFundsAllowed(&_Bridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeSession) Owner() (common.Address, error) {
	return _Bridge.Contract.Owner(&_Bridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeCallerSession) Owner() (common.Address, error) {
	return _Bridge.Contract.Owner(&_Bridge.CallOpts)
}

// Refund is a free data retrieval call binding the contract method 0x5e30b8a6.
//
// Solidity: function refund(address , address ) view returns(uint256 fee, uint256 amount)
func (_Bridge *BridgeCaller) Refund(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (struct {
	Fee    *big.Int
	Amount *big.Int
}, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "refund", arg0, arg1)

	outstruct := new(struct {
		Fee    *big.Int
		Amount *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Fee = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.Amount = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Refund is a free data retrieval call binding the contract method 0x5e30b8a6.
//
// Solidity: function refund(address , address ) view returns(uint256 fee, uint256 amount)
func (_Bridge *BridgeSession) Refund(arg0 common.Address, arg1 common.Address) (struct {
	Fee    *big.Int
	Amount *big.Int
}, error) {
	return _Bridge.Contract.Refund(&_Bridge.CallOpts, arg0, arg1)
}

// Refund is a free data retrieval call binding the contract method 0x5e30b8a6.
//
// Solidity: function refund(address , address ) view returns(uint256 fee, uint256 amount)
func (_Bridge *BridgeCallerSession) Refund(arg0 common.Address, arg1 common.Address) (struct {
	Fee    *big.Int
	Amount *big.Int
}, error) {
	return _Bridge.Contract.Refund(&_Bridge.CallOpts, arg0, arg1)
}

// SupportedTokens is a free data retrieval call binding the contract method 0x68c4ac26.
//
// Solidity: function supportedTokens(address ) view returns(bool)
func (_Bridge *BridgeCaller) SupportedTokens(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "supportedTokens", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportedTokens is a free data retrieval call binding the contract method 0x68c4ac26.
//
// Solidity: function supportedTokens(address ) view returns(bool)
func (_Bridge *BridgeSession) SupportedTokens(arg0 common.Address) (bool, error) {
	return _Bridge.Contract.SupportedTokens(&_Bridge.CallOpts, arg0)
}

// SupportedTokens is a free data retrieval call binding the contract method 0x68c4ac26.
//
// Solidity: function supportedTokens(address ) view returns(bool)
func (_Bridge *BridgeCallerSession) SupportedTokens(arg0 common.Address) (bool, error) {
	return _Bridge.Contract.SupportedTokens(&_Bridge.CallOpts, arg0)
}

// AddToken is a paid mutator transaction binding the contract method 0xd48bfca7.
//
// Solidity: function addToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactor) AddToken(opts *bind.TransactOpts, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "addToken", _tokenAddress)
}

// AddToken is a paid mutator transaction binding the contract method 0xd48bfca7.
//
// Solidity: function addToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeSession) AddToken(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AddToken(&_Bridge.TransactOpts, _tokenAddress)
}

// AddToken is a paid mutator transaction binding the contract method 0xd48bfca7.
//
// Solidity: function addToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactorSession) AddToken(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AddToken(&_Bridge.TransactOpts, _tokenAddress)
}

// ClaimContractTokens is a paid mutator transaction binding the contract method 0x100f0333.
//
// Solidity: function claimContractTokens(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactor) ClaimContractTokens(opts *bind.TransactOpts, _claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claimContractTokens", _claimableAmount, _tokenAddress)
}

// ClaimContractTokens is a paid mutator transaction binding the contract method 0x100f0333.
//
// Solidity: function claimContractTokens(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeSession) ClaimContractTokens(_claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimContractTokens(&_Bridge.TransactOpts, _claimableAmount, _tokenAddress)
}

// ClaimContractTokens is a paid mutator transaction binding the contract method 0x100f0333.
//
// Solidity: function claimContractTokens(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactorSession) ClaimContractTokens(_claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimContractTokens(&_Bridge.TransactOpts, _claimableAmount, _tokenAddress)
}

// ClaimLockedTokens is a paid mutator transaction binding the contract method 0x1adadda8.
//
// Solidity: function claimLockedTokens(address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactor) ClaimLockedTokens(opts *bind.TransactOpts, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claimLockedTokens", _tokenAddress)
}

// ClaimLockedTokens is a paid mutator transaction binding the contract method 0x1adadda8.
//
// Solidity: function claimLockedTokens(address _tokenAddress) returns(bool)
func (_Bridge *BridgeSession) ClaimLockedTokens(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimLockedTokens(&_Bridge.TransactOpts, _tokenAddress)
}

// ClaimLockedTokens is a paid mutator transaction binding the contract method 0x1adadda8.
//
// Solidity: function claimLockedTokens(address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactorSession) ClaimLockedTokens(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimLockedTokens(&_Bridge.TransactOpts, _tokenAddress)
}

// ClaimRefund is a paid mutator transaction binding the contract method 0xbffa55d5.
//
// Solidity: function claimRefund(address _tokenAddress) payable returns(bool)
func (_Bridge *BridgeTransactor) ClaimRefund(opts *bind.TransactOpts, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claimRefund", _tokenAddress)
}

// ClaimRefund is a paid mutator transaction binding the contract method 0xbffa55d5.
//
// Solidity: function claimRefund(address _tokenAddress) payable returns(bool)
func (_Bridge *BridgeSession) ClaimRefund(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimRefund(&_Bridge.TransactOpts, _tokenAddress)
}

// ClaimRefund is a paid mutator transaction binding the contract method 0xbffa55d5.
//
// Solidity: function claimRefund(address _tokenAddress) payable returns(bool)
func (_Bridge *BridgeTransactorSession) ClaimRefund(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimRefund(&_Bridge.TransactOpts, _tokenAddress)
}

// Deposit is a paid mutator transaction binding the contract method 0x2a48ac9a.
//
// Solidity: function deposit(string _odinAddress, address _tokenAddress, uint256 _depositAmount) returns(bool)
func (_Bridge *BridgeTransactor) Deposit(opts *bind.TransactOpts, _odinAddress string, _tokenAddress common.Address, _depositAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "deposit", _odinAddress, _tokenAddress, _depositAmount)
}

// Deposit is a paid mutator transaction binding the contract method 0x2a48ac9a.
//
// Solidity: function deposit(string _odinAddress, address _tokenAddress, uint256 _depositAmount) returns(bool)
func (_Bridge *BridgeSession) Deposit(_odinAddress string, _tokenAddress common.Address, _depositAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, _odinAddress, _tokenAddress, _depositAmount)
}

// Deposit is a paid mutator transaction binding the contract method 0x2a48ac9a.
//
// Solidity: function deposit(string _odinAddress, address _tokenAddress, uint256 _depositAmount) returns(bool)
func (_Bridge *BridgeTransactorSession) Deposit(_odinAddress string, _tokenAddress common.Address, _depositAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.Deposit(&_Bridge.TransactOpts, _odinAddress, _tokenAddress, _depositAmount)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactor) RemoveToken(opts *bind.TransactOpts, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "removeToken", _tokenAddress)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeSession) RemoveToken(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RemoveToken(&_Bridge.TransactOpts, _tokenAddress)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactorSession) RemoveToken(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RemoveToken(&_Bridge.TransactOpts, _tokenAddress)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bridge.Contract.RenounceOwnership(&_Bridge.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bridge.Contract.RenounceOwnership(&_Bridge.TransactOpts)
}

// SetAllowanceToClaimLockedFunds is a paid mutator transaction binding the contract method 0x8ef37c48.
//
// Solidity: function setAllowanceToClaimLockedFunds(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactor) SetAllowanceToClaimLockedFunds(opts *bind.TransactOpts, _allowed bool) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setAllowanceToClaimLockedFunds", _allowed)
}

// SetAllowanceToClaimLockedFunds is a paid mutator transaction binding the contract method 0x8ef37c48.
//
// Solidity: function setAllowanceToClaimLockedFunds(bool _allowed) returns(bool)
func (_Bridge *BridgeSession) SetAllowanceToClaimLockedFunds(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToClaimLockedFunds(&_Bridge.TransactOpts, _allowed)
}

// SetAllowanceToClaimLockedFunds is a paid mutator transaction binding the contract method 0x8ef37c48.
//
// Solidity: function setAllowanceToClaimLockedFunds(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactorSession) SetAllowanceToClaimLockedFunds(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToClaimLockedFunds(&_Bridge.TransactOpts, _allowed)
}

// SetAllowanceToDeposit is a paid mutator transaction binding the contract method 0xd0fd1de1.
//
// Solidity: function setAllowanceToDeposit(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactor) SetAllowanceToDeposit(opts *bind.TransactOpts, _allowed bool) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setAllowanceToDeposit", _allowed)
}

// SetAllowanceToDeposit is a paid mutator transaction binding the contract method 0xd0fd1de1.
//
// Solidity: function setAllowanceToDeposit(bool _allowed) returns(bool)
func (_Bridge *BridgeSession) SetAllowanceToDeposit(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToDeposit(&_Bridge.TransactOpts, _allowed)
}

// SetAllowanceToDeposit is a paid mutator transaction binding the contract method 0xd0fd1de1.
//
// Solidity: function setAllowanceToDeposit(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactorSession) SetAllowanceToDeposit(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToDeposit(&_Bridge.TransactOpts, _allowed)
}

// SetAllowanceToLock is a paid mutator transaction binding the contract method 0xa8d275cc.
//
// Solidity: function setAllowanceToLock(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactor) SetAllowanceToLock(opts *bind.TransactOpts, _allowed bool) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setAllowanceToLock", _allowed)
}

// SetAllowanceToLock is a paid mutator transaction binding the contract method 0xa8d275cc.
//
// Solidity: function setAllowanceToLock(bool _allowed) returns(bool)
func (_Bridge *BridgeSession) SetAllowanceToLock(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToLock(&_Bridge.TransactOpts, _allowed)
}

// SetAllowanceToLock is a paid mutator transaction binding the contract method 0xa8d275cc.
//
// Solidity: function setAllowanceToLock(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactorSession) SetAllowanceToLock(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToLock(&_Bridge.TransactOpts, _allowed)
}

// SetRefund is a paid mutator transaction binding the contract method 0x61f355b3.
//
// Solidity: function setRefund(address _userAddress, address _tokenAddress, uint256 _refundAmount) returns(bool)
func (_Bridge *BridgeTransactor) SetRefund(opts *bind.TransactOpts, _userAddress common.Address, _tokenAddress common.Address, _refundAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setRefund", _userAddress, _tokenAddress, _refundAmount)
}

// SetRefund is a paid mutator transaction binding the contract method 0x61f355b3.
//
// Solidity: function setRefund(address _userAddress, address _tokenAddress, uint256 _refundAmount) returns(bool)
func (_Bridge *BridgeSession) SetRefund(_userAddress common.Address, _tokenAddress common.Address, _refundAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.SetRefund(&_Bridge.TransactOpts, _userAddress, _tokenAddress, _refundAmount)
}

// SetRefund is a paid mutator transaction binding the contract method 0x61f355b3.
//
// Solidity: function setRefund(address _userAddress, address _tokenAddress, uint256 _refundAmount) returns(bool)
func (_Bridge *BridgeTransactorSession) SetRefund(_userAddress common.Address, _tokenAddress common.Address, _refundAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.SetRefund(&_Bridge.TransactOpts, _userAddress, _tokenAddress, _refundAmount)
}

// SetRefundGas is a paid mutator transaction binding the contract method 0xb782be5a.
//
// Solidity: function setRefundGas(uint256 _gas) returns(bool)
func (_Bridge *BridgeTransactor) SetRefundGas(opts *bind.TransactOpts, _gas *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setRefundGas", _gas)
}

// SetRefundGas is a paid mutator transaction binding the contract method 0xb782be5a.
//
// Solidity: function setRefundGas(uint256 _gas) returns(bool)
func (_Bridge *BridgeSession) SetRefundGas(_gas *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.SetRefundGas(&_Bridge.TransactOpts, _gas)
}

// SetRefundGas is a paid mutator transaction binding the contract method 0xb782be5a.
//
// Solidity: function setRefundGas(uint256 _gas) returns(bool)
func (_Bridge *BridgeTransactorSession) SetRefundGas(_gas *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.SetRefundGas(&_Bridge.TransactOpts, _gas)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOwnership(&_Bridge.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOwnership(&_Bridge.TransactOpts, newOwner)
}

// BridgeLockedTokensClaimedIterator is returned from FilterLockedTokensClaimed and is used to iterate over the raw logs and unpacked data for LockedTokensClaimed events raised by the Bridge contract.
type BridgeLockedTokensClaimedIterator struct {
	Event *BridgeLockedTokensClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeLockedTokensClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeLockedTokensClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeLockedTokensClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeLockedTokensClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeLockedTokensClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeLockedTokensClaimed represents a LockedTokensClaimed event raised by the Bridge contract.
type BridgeLockedTokensClaimed struct {
	UserAddress  common.Address
	TokenAddress common.Address
	LockedAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterLockedTokensClaimed is a free log retrieval operation binding the contract event 0x3cbe8d2fc92222d9e96654938e27f342d0e47034e80d48415aac29f001bd7f09.
//
// Solidity: event LockedTokensClaimed(address indexed _userAddress, address indexed _tokenAddress, uint256 _lockedAmount)
func (_Bridge *BridgeFilterer) FilterLockedTokensClaimed(opts *bind.FilterOpts, _userAddress []common.Address, _tokenAddress []common.Address) (*BridgeLockedTokensClaimedIterator, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}
	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "LockedTokensClaimed", _userAddressRule, _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeLockedTokensClaimedIterator{contract: _Bridge.contract, event: "LockedTokensClaimed", logs: logs, sub: sub}, nil
}

// WatchLockedTokensClaimed is a free log subscription operation binding the contract event 0x3cbe8d2fc92222d9e96654938e27f342d0e47034e80d48415aac29f001bd7f09.
//
// Solidity: event LockedTokensClaimed(address indexed _userAddress, address indexed _tokenAddress, uint256 _lockedAmount)
func (_Bridge *BridgeFilterer) WatchLockedTokensClaimed(opts *bind.WatchOpts, sink chan<- *BridgeLockedTokensClaimed, _userAddress []common.Address, _tokenAddress []common.Address) (event.Subscription, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}
	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "LockedTokensClaimed", _userAddressRule, _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeLockedTokensClaimed)
				if err := _Bridge.contract.UnpackLog(event, "LockedTokensClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLockedTokensClaimed is a log parse operation binding the contract event 0x3cbe8d2fc92222d9e96654938e27f342d0e47034e80d48415aac29f001bd7f09.
//
// Solidity: event LockedTokensClaimed(address indexed _userAddress, address indexed _tokenAddress, uint256 _lockedAmount)
func (_Bridge *BridgeFilterer) ParseLockedTokensClaimed(log types.Log) (*BridgeLockedTokensClaimed, error) {
	event := new(BridgeLockedTokensClaimed)
	if err := _Bridge.contract.UnpackLog(event, "LockedTokensClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Bridge contract.
type BridgeOwnershipTransferredIterator struct {
	Event *BridgeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeOwnershipTransferred represents a OwnershipTransferred event raised by the Bridge contract.
type BridgeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BridgeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeOwnershipTransferredIterator{contract: _Bridge.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BridgeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeOwnershipTransferred)
				if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) ParseOwnershipTransferred(log types.Log) (*BridgeOwnershipTransferred, error) {
	event := new(BridgeOwnershipTransferred)
	if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeRefundClaimedIterator is returned from FilterRefundClaimed and is used to iterate over the raw logs and unpacked data for RefundClaimed events raised by the Bridge contract.
type BridgeRefundClaimedIterator struct {
	Event *BridgeRefundClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRefundClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRefundClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRefundClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRefundClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRefundClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRefundClaimed represents a RefundClaimed event raised by the Bridge contract.
type BridgeRefundClaimed struct {
	UserAddress  common.Address
	TokenAddress common.Address
	RefundAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRefundClaimed is a free log retrieval operation binding the contract event 0x39bed68a008a68cbf907d7ff6bc3629912af6516cb837cfa3f871ad9f2b8a944.
//
// Solidity: event RefundClaimed(address indexed _userAddress, address indexed _tokenAddress, uint256 _refundAmount)
func (_Bridge *BridgeFilterer) FilterRefundClaimed(opts *bind.FilterOpts, _userAddress []common.Address, _tokenAddress []common.Address) (*BridgeRefundClaimedIterator, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}
	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RefundClaimed", _userAddressRule, _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRefundClaimedIterator{contract: _Bridge.contract, event: "RefundClaimed", logs: logs, sub: sub}, nil
}

// WatchRefundClaimed is a free log subscription operation binding the contract event 0x39bed68a008a68cbf907d7ff6bc3629912af6516cb837cfa3f871ad9f2b8a944.
//
// Solidity: event RefundClaimed(address indexed _userAddress, address indexed _tokenAddress, uint256 _refundAmount)
func (_Bridge *BridgeFilterer) WatchRefundClaimed(opts *bind.WatchOpts, sink chan<- *BridgeRefundClaimed, _userAddress []common.Address, _tokenAddress []common.Address) (event.Subscription, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}
	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RefundClaimed", _userAddressRule, _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRefundClaimed)
				if err := _Bridge.contract.UnpackLog(event, "RefundClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefundClaimed is a log parse operation binding the contract event 0x39bed68a008a68cbf907d7ff6bc3629912af6516cb837cfa3f871ad9f2b8a944.
//
// Solidity: event RefundClaimed(address indexed _userAddress, address indexed _tokenAddress, uint256 _refundAmount)
func (_Bridge *BridgeFilterer) ParseRefundClaimed(log types.Log) (*BridgeRefundClaimed, error) {
	event := new(BridgeRefundClaimed)
	if err := _Bridge.contract.UnpackLog(event, "RefundClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeRefundSetIterator is returned from FilterRefundSet and is used to iterate over the raw logs and unpacked data for RefundSet events raised by the Bridge contract.
type BridgeRefundSetIterator struct {
	Event *BridgeRefundSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeRefundSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeRefundSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeRefundSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeRefundSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeRefundSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeRefundSet represents a RefundSet event raised by the Bridge contract.
type BridgeRefundSet struct {
	UserAddress  common.Address
	TokenAddress common.Address
	RefundAmount *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterRefundSet is a free log retrieval operation binding the contract event 0x44c29c6a804074ee7d8b37a2822a80057f6d7ae3aa50cf26fd103ba45f706a12.
//
// Solidity: event RefundSet(address indexed _userAddress, address indexed _tokenAddress, uint256 _refundAmount)
func (_Bridge *BridgeFilterer) FilterRefundSet(opts *bind.FilterOpts, _userAddress []common.Address, _tokenAddress []common.Address) (*BridgeRefundSetIterator, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}
	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "RefundSet", _userAddressRule, _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeRefundSetIterator{contract: _Bridge.contract, event: "RefundSet", logs: logs, sub: sub}, nil
}

// WatchRefundSet is a free log subscription operation binding the contract event 0x44c29c6a804074ee7d8b37a2822a80057f6d7ae3aa50cf26fd103ba45f706a12.
//
// Solidity: event RefundSet(address indexed _userAddress, address indexed _tokenAddress, uint256 _refundAmount)
func (_Bridge *BridgeFilterer) WatchRefundSet(opts *bind.WatchOpts, sink chan<- *BridgeRefundSet, _userAddress []common.Address, _tokenAddress []common.Address) (event.Subscription, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}
	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "RefundSet", _userAddressRule, _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeRefundSet)
				if err := _Bridge.contract.UnpackLog(event, "RefundSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRefundSet is a log parse operation binding the contract event 0x44c29c6a804074ee7d8b37a2822a80057f6d7ae3aa50cf26fd103ba45f706a12.
//
// Solidity: event RefundSet(address indexed _userAddress, address indexed _tokenAddress, uint256 _refundAmount)
func (_Bridge *BridgeFilterer) ParseRefundSet(log types.Log) (*BridgeRefundSet, error) {
	event := new(BridgeRefundSet)
	if err := _Bridge.contract.UnpackLog(event, "RefundSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTokenAddedIterator is returned from FilterTokenAdded and is used to iterate over the raw logs and unpacked data for TokenAdded events raised by the Bridge contract.
type BridgeTokenAddedIterator struct {
	Event *BridgeTokenAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTokenAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTokenAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTokenAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTokenAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTokenAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTokenAdded represents a TokenAdded event raised by the Bridge contract.
type BridgeTokenAdded struct {
	TokenAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterTokenAdded is a free log retrieval operation binding the contract event 0x784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a4.
//
// Solidity: event TokenAdded(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) FilterTokenAdded(opts *bind.FilterOpts, _tokenAddress []common.Address) (*BridgeTokenAddedIterator, error) {

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "TokenAdded", _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeTokenAddedIterator{contract: _Bridge.contract, event: "TokenAdded", logs: logs, sub: sub}, nil
}

// WatchTokenAdded is a free log subscription operation binding the contract event 0x784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a4.
//
// Solidity: event TokenAdded(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) WatchTokenAdded(opts *bind.WatchOpts, sink chan<- *BridgeTokenAdded, _tokenAddress []common.Address) (event.Subscription, error) {

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "TokenAdded", _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTokenAdded)
				if err := _Bridge.contract.UnpackLog(event, "TokenAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenAdded is a log parse operation binding the contract event 0x784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a4.
//
// Solidity: event TokenAdded(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) ParseTokenAdded(log types.Log) (*BridgeTokenAdded, error) {
	event := new(BridgeTokenAdded)
	if err := _Bridge.contract.UnpackLog(event, "TokenAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTokenRemovedIterator is returned from FilterTokenRemoved and is used to iterate over the raw logs and unpacked data for TokenRemoved events raised by the Bridge contract.
type BridgeTokenRemovedIterator struct {
	Event *BridgeTokenRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTokenRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTokenRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTokenRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTokenRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTokenRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTokenRemoved represents a TokenRemoved event raised by the Bridge contract.
type BridgeTokenRemoved struct {
	TokenAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterTokenRemoved is a free log retrieval operation binding the contract event 0x4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3.
//
// Solidity: event TokenRemoved(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) FilterTokenRemoved(opts *bind.FilterOpts, _tokenAddress []common.Address) (*BridgeTokenRemovedIterator, error) {

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "TokenRemoved", _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeTokenRemovedIterator{contract: _Bridge.contract, event: "TokenRemoved", logs: logs, sub: sub}, nil
}

// WatchTokenRemoved is a free log subscription operation binding the contract event 0x4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3.
//
// Solidity: event TokenRemoved(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) WatchTokenRemoved(opts *bind.WatchOpts, sink chan<- *BridgeTokenRemoved, _tokenAddress []common.Address) (event.Subscription, error) {

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "TokenRemoved", _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTokenRemoved)
				if err := _Bridge.contract.UnpackLog(event, "TokenRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenRemoved is a log parse operation binding the contract event 0x4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3.
//
// Solidity: event TokenRemoved(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) ParseTokenRemoved(log types.Log) (*BridgeTokenRemoved, error) {
	event := new(BridgeTokenRemoved)
	if err := _Bridge.contract.UnpackLog(event, "TokenRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTokensDepositedIterator is returned from FilterTokensDeposited and is used to iterate over the raw logs and unpacked data for TokensDeposited events raised by the Bridge contract.
type BridgeTokensDepositedIterator struct {
	Event *BridgeTokensDeposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTokensDepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTokensDeposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTokensDeposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTokensDepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTokensDepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTokensDeposited represents a TokensDeposited event raised by the Bridge contract.
type BridgeTokensDeposited struct {
	UserAddress    common.Address
	OdinAddress    string
	DepositAmount  *big.Int
	TokenAddress   common.Address
	Symbol         string
	TokenPrecision uint8
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterTokensDeposited is a free log retrieval operation binding the contract event 0x3e143f8fba8031d7acf9c756e1bd2e6ceae2887f358df89f06dd01322aa5e8f4.
//
// Solidity: event TokensDeposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount, address indexed _tokenAddress, string _symbol, uint8 _tokenPrecision)
func (_Bridge *BridgeFilterer) FilterTokensDeposited(opts *bind.FilterOpts, _userAddress []common.Address, _tokenAddress []common.Address) (*BridgeTokensDepositedIterator, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "TokensDeposited", _userAddressRule, _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeTokensDepositedIterator{contract: _Bridge.contract, event: "TokensDeposited", logs: logs, sub: sub}, nil
}

// WatchTokensDeposited is a free log subscription operation binding the contract event 0x3e143f8fba8031d7acf9c756e1bd2e6ceae2887f358df89f06dd01322aa5e8f4.
//
// Solidity: event TokensDeposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount, address indexed _tokenAddress, string _symbol, uint8 _tokenPrecision)
func (_Bridge *BridgeFilterer) WatchTokensDeposited(opts *bind.WatchOpts, sink chan<- *BridgeTokensDeposited, _userAddress []common.Address, _tokenAddress []common.Address) (event.Subscription, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "TokensDeposited", _userAddressRule, _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTokensDeposited)
				if err := _Bridge.contract.UnpackLog(event, "TokensDeposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokensDeposited is a log parse operation binding the contract event 0x3e143f8fba8031d7acf9c756e1bd2e6ceae2887f358df89f06dd01322aa5e8f4.
//
// Solidity: event TokensDeposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount, address indexed _tokenAddress, string _symbol, uint8 _tokenPrecision)
func (_Bridge *BridgeFilterer) ParseTokensDeposited(log types.Log) (*BridgeTokensDeposited, error) {
	event := new(BridgeTokensDeposited)
	if err := _Bridge.contract.UnpackLog(event, "TokensDeposited", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTokensLockedIterator is returned from FilterTokensLocked and is used to iterate over the raw logs and unpacked data for TokensLocked events raised by the Bridge contract.
type BridgeTokensLockedIterator struct {
	Event *BridgeTokensLocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTokensLockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTokensLocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTokensLocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTokensLockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTokensLockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTokensLocked represents a TokensLocked event raised by the Bridge contract.
type BridgeTokensLocked struct {
	UserAddress    common.Address
	OdinAddress    string
	DepositAmount  *big.Int
	TokenAddress   common.Address
	Symbol         string
	TokenPrecision uint8
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterTokensLocked is a free log retrieval operation binding the contract event 0x9db88e69bec1736ae639740137aa6d9fae763473a8377a4fd30d6b7df9f72277.
//
// Solidity: event TokensLocked(address indexed _userAddress, string _odinAddress, uint256 _depositAmount, address indexed _tokenAddress, string _symbol, uint8 _tokenPrecision)
func (_Bridge *BridgeFilterer) FilterTokensLocked(opts *bind.FilterOpts, _userAddress []common.Address, _tokenAddress []common.Address) (*BridgeTokensLockedIterator, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "TokensLocked", _userAddressRule, _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeTokensLockedIterator{contract: _Bridge.contract, event: "TokensLocked", logs: logs, sub: sub}, nil
}

// WatchTokensLocked is a free log subscription operation binding the contract event 0x9db88e69bec1736ae639740137aa6d9fae763473a8377a4fd30d6b7df9f72277.
//
// Solidity: event TokensLocked(address indexed _userAddress, string _odinAddress, uint256 _depositAmount, address indexed _tokenAddress, string _symbol, uint8 _tokenPrecision)
func (_Bridge *BridgeFilterer) WatchTokensLocked(opts *bind.WatchOpts, sink chan<- *BridgeTokensLocked, _userAddress []common.Address, _tokenAddress []common.Address) (event.Subscription, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "TokensLocked", _userAddressRule, _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTokensLocked)
				if err := _Bridge.contract.UnpackLog(event, "TokensLocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokensLocked is a log parse operation binding the contract event 0x9db88e69bec1736ae639740137aa6d9fae763473a8377a4fd30d6b7df9f72277.
//
// Solidity: event TokensLocked(address indexed _userAddress, string _odinAddress, uint256 _depositAmount, address indexed _tokenAddress, string _symbol, uint8 _tokenPrecision)
func (_Bridge *BridgeFilterer) ParseTokensLocked(log types.Log) (*BridgeTokensLocked, error) {
	event := new(BridgeTokensLocked)
	if err := _Bridge.contract.UnpackLog(event, "TokensLocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
