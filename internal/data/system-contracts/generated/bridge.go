// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package generated

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeABI is the input ABI used to generate the binding from.
const BridgeABI = "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_supportedTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_depositCompensation\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_allowanceToLockFunds\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_allowanceToClaimLockedFunds\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_odinAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_tokenPrecision\",\"type\":\"uint8\"}],\"name\":\"ERC20Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_odinAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"ETHDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"claimContractERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimableAmount\",\"type\":\"uint256\"}],\"name\":\"claimContractETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"claimLockedERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimableAmount\",\"type\":\"uint256\"}],\"name\":\"claimLockedETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"compensationDeposited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositCompensation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_odinAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"depositERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_odinAddress\",\"type\":\"string\"}],\"name\":\"depositETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"payBackERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"payBackETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowanceToClaimLockedFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowanceToLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_compensationAmount\",\"type\":\"uint256\"}],\"name\":\"setDepositCompensation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// BridgeBin is the compiled bytecode used for deploying new contracts.
var BridgeBin = "0x60806040523480156200001157600080fd5b506040516200377b3803806200377b8339818101604052810190620000379190620002d8565b600062000049620001e960201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35060005b8451811015620001a35760016003600087848151811062000134577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806200019a9062000435565b915050620000ea565b508260018190555081600460016101000a81548160ff02191690831515021790555080600460006101000a81548160ff0219169083151502179055505050505062000540565b600033905090565b600062000208620002028462000386565b6200035d565b905080838252602082019050828560208602820111156200022857600080fd5b60005b858110156200025c578162000241888262000266565b8452602084019350602083019250506001810190506200022b565b5050509392505050565b6000815190506200027781620004f2565b92915050565b600082601f8301126200028f57600080fd5b8151620002a1848260208601620001f1565b91505092915050565b600081519050620002bb816200050c565b92915050565b600081519050620002d28162000526565b92915050565b60008060008060808587031215620002ef57600080fd5b600085015167ffffffffffffffff8111156200030a57600080fd5b62000318878288016200027d565b94505060206200032b87828801620002c1565b93505060406200033e87828801620002aa565b92505060606200035187828801620002aa565b91505092959194509250565b6000620003696200037c565b9050620003778282620003ff565b919050565b6000604051905090565b600067ffffffffffffffff821115620003a457620003a3620004b2565b5b602082029050602081019050919050565b6000620003c282620003d5565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6200040a82620004e1565b810181811067ffffffffffffffff821117156200042c576200042b620004b2565b5b80604052505050565b60006200044282620003f5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000478576200047762000483565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b620004fd81620003b5565b81146200050957600080fd5b50565b6200051781620003c9565b81146200052357600080fd5b50565b6200053181620003f5565b81146200053d57600080fd5b50565b61322b80620005506000396000f3fe60806040526004361061012a5760003560e01c80639371388d116100ab578063c7b77eb01161006f578063c7b77eb01461045e578063d35b78011461049b578063d48bfca7146104d8578063f2fde38b14610515578063f99f28ee1461053e578063fe0dde621461057b5761012a565b80639371388d1461034c578063994f5a77146103895780639b1c48e6146103b4578063a8d275cc146103e4578063be20e539146104215761012a565b806368c4ac26116100f257806368c4ac2614610260578063715018a61461029d5780637288f11a146102b45780638da5cb5b146102e45780638ef37c481461030f5761012a565b80630d55f6b21461012f5780633155c58a1461016c57806334c15e28146101a957806349ca86d5146101e65780635fa7b58414610223575b600080fd5b34801561013b57600080fd5b5061015660048036038101906101519190612216565b6105b8565b6040516101639190612b08565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e9190612441565b6105d0565b6040516101a0919061284a565b60405180910390f35b3480156101b557600080fd5b506101d060048036038101906101cb9190612216565b610704565b6040516101dd919061284a565b60405180910390f35b3480156101f257600080fd5b5061020d60048036038101906102089190612441565b610724565b60405161021a919061284a565b60405180910390f35b34801561022f57600080fd5b5061024a60048036038101906102459190612216565b610909565b604051610257919061284a565b60405180910390f35b34801561026c57600080fd5b5061028760048036038101906102829190612216565b610a2b565b604051610294919061284a565b60405180910390f35b3480156102a957600080fd5b506102b2610a4b565b005b6102ce60048036038101906102c991906122ca565b610b85565b6040516102db919061284a565b60405180910390f35b3480156102f057600080fd5b506102f96110d4565b60405161030691906127cf565b60405180910390f35b34801561031b57600080fd5b506103366004803603810190610331919061236d565b6110fd565b604051610343919061284a565b60405180910390f35b34801561035857600080fd5b50610373600480360381019061036e919061227b565b61119e565b604051610380919061284a565b60405180910390f35b34801561039557600080fd5b5061039e6113ff565b6040516103ab9190612b08565b60405180910390f35b6103ce60048036038101906103c991906123bf565b611405565b6040516103db919061284a565b60405180910390f35b3480156103f057600080fd5b5061040b6004803603810190610406919061236d565b61165d565b604051610418919061284a565b60405180910390f35b34801561042d57600080fd5b5061044860048036038101906104439190612441565b6116fe565b604051610455919061284a565b60405180910390f35b34801561046a57600080fd5b5061048560048036038101906104809190612331565b61178c565b604051610492919061284a565b60405180910390f35b3480156104a757600080fd5b506104c260048036038101906104bd919061223f565b6119c7565b6040516104cf9190612b08565b60405180910390f35b3480156104e457600080fd5b506104ff60048036038101906104fa9190612216565b6119ec565b60405161050c919061284a565b60405180910390f35b34801561052157600080fd5b5061053c60048036038101906105379190612216565b611b0e565b005b34801561054a57600080fd5b506105656004803603810190610560919061246a565b611cb7565b604051610572919061284a565b60405180910390f35b34801561058757600080fd5b506105a2600480360381019061059d919061246a565b611f3c565b6040516105af919061284a565b60405180910390f35b60056020528060005260406000206000915090505481565b60006105da612096565b73ffffffffffffffffffffffffffffffffffffffff166105f86110d4565b73ffffffffffffffffffffffffffffffffffffffff161461064e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610645906129c8565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff1683604051610674906127ba565b60006040518083038185875af1925050503d80600081146106b1576040519150601f19603f3d011682016040523d82523d6000602084013e6106b6565b606091505b50509050806106fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f190612988565b60405180910390fd5b6001915050919050565b60026020528060005260406000206000915054906101000a900460ff1681565b6000600460009054906101000a900460ff16610775576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076c90612a08565b60405180910390fd5b6000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156107fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f390612a88565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff1684604051610822906127ba565b60006040518083038185875af1925050503d806000811461085f576040519150601f19603f3d011682016040523d82523d6000602084013e610864565b606091505b50509050806108a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089f90612908565b60405180910390fd5b6108bb848361209e90919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600192505050919050565b6000610913612096565b73ffffffffffffffffffffffffffffffffffffffff166109316110d4565b73ffffffffffffffffffffffffffffffffffffffff1614610987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097e906129c8565b60405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd360405160405180910390a260019050919050565b60036020528060005260406000206000915054906101000a900460ff1681565b610a53612096565b73ffffffffffffffffffffffffffffffffffffffff16610a716110d4565b73ffffffffffffffffffffffffffffffffffffffff1614610ac7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610abe906129c8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000610ba68473ffffffffffffffffffffffffffffffffffffffff166120b4565b610be5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bdc90612aa8565b60405180910390fd5b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610c71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6890612a48565b60405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610d6057600154341015610d07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cfe906129e8565b60405180910390fd5b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b600084905060008173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610da4939291906127ea565b602060405180830381600087803b158015610dbe57600080fd5b505af1158015610dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df69190612396565b905080610e38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2f90612a68565b60405180910390fd5b600460019054906101000a900460ff1615610f5d57610edc84600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120c790919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f380818a686b3749c864e4fe5b344c0fd3e0681231881695473b42c2c84d7271d87878673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610ff457600080fd5b505afa158015611008573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110319190612400565b8773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561107757600080fd5b505afa15801561108b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110af91906124a6565b6040516110bf9493929190612895565b60405180910390a36001925050509392505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000611107612096565b73ffffffffffffffffffffffffffffffffffffffff166111256110d4565b73ffffffffffffffffffffffffffffffffffffffff161461117b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611172906129c8565b60405180910390fd5b81600460006101000a81548160ff02191690831515021790555060019050919050565b60006111a8612096565b73ffffffffffffffffffffffffffffffffffffffff166111c66110d4565b73ffffffffffffffffffffffffffffffffffffffff161461121c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611213906129c8565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86856040518363ffffffff1660e01b8152600401611259929190612821565b602060405180830381600087803b15801561127357600080fd5b505af1158015611287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ab9190612396565b9050806112ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e4906129a8565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600154604051611313906127ba565b60006040518083038185875af1925050503d8060008114611350576040519150601f19603f3d011682016040523d82523d6000602084013e611355565b606091505b5050809150508061139b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139290612ac8565b60405180910390fd5b6000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060019150509392505050565b60015481565b600080349050600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166115155760006001549050808210156114a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149d906128e8565b60405180910390fd5b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611511818361209e90919063ffffffff16565b9150505b60008111611558576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154f90612948565b60405180910390fd5b600460019054906101000a900460ff1615611603576115bf81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546120c790919063ffffffff16565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b3373ffffffffffffffffffffffffffffffffffffffff167fa5ee847b808915e440e213630058643951dfa817cd585254162b8e69b71fa432848360405161164b929190612865565b60405180910390a26001915050919050565b6000611667612096565b73ffffffffffffffffffffffffffffffffffffffff166116856110d4565b73ffffffffffffffffffffffffffffffffffffffff16146116db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116d2906129c8565b60405180910390fd5b81600460016101000a81548160ff02191690831515021790555060019050919050565b6000611708612096565b73ffffffffffffffffffffffffffffffffffffffff166117266110d4565b73ffffffffffffffffffffffffffffffffffffffff161461177c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611773906129c8565b60405180910390fd5b8160018190555060019050919050565b6000611796612096565b73ffffffffffffffffffffffffffffffffffffffff166117b46110d4565b73ffffffffffffffffffffffffffffffffffffffff161461180a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611801906129c8565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff1683604051611830906127ba565b60006040518083038185875af1925050503d806000811461186d576040519150601f19603f3d011682016040523d82523d6000602084013e611872565b606091505b50509050806118b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ad90612a28565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166001546040516118dc906127ba565b60006040518083038185875af1925050503d8060008114611919576040519150601f19603f3d011682016040523d82523d6000602084013e61191e565b606091505b50508091505080611964576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195b90612ac8565b60405180910390fd5b6000600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600191505092915050565b6006602052816000526040600020602052806000526040600020600091509150505481565b60006119f6612096565b73ffffffffffffffffffffffffffffffffffffffff16611a146110d4565b73ffffffffffffffffffffffffffffffffffffffff1614611a6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a61906129c8565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a460405160405180910390a260019050919050565b611b16612096565b73ffffffffffffffffffffffffffffffffffffffff16611b346110d4565b73ffffffffffffffffffffffffffffffffffffffff1614611b8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b81906129c8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611bfa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bf190612928565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600460009054906101000a900460ff16611d08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cff90612a08565b60405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080841115611dcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc390612ae8565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33876040518363ffffffff1660e01b8152600401611e09929190612821565b602060405180830381600087803b158015611e2357600080fd5b505af1158015611e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5b9190612396565b905080611e9d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e9490612968565b60405180910390fd5b611eb0858361209e90919063ffffffff16565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060019250505092915050565b6000611f46612096565b73ffffffffffffffffffffffffffffffffffffffff16611f646110d4565b73ffffffffffffffffffffffffffffffffffffffff1614611fba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb1906129c8565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b8152600401611ff7929190612821565b602060405180830381600087803b15801561201157600080fd5b505af1158015612025573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120499190612396565b90508061208b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208290612988565b60405180910390fd5b600191505092915050565b600033905090565b600081836120ac9190612bf6565b905092915050565b600080823b905060008111915050919050565b600081836120d59190612ba0565b905092915050565b60006120f06120eb84612b48565b612b23565b90508281526020810184848401111561210857600080fd5b612113848285612c7f565b509392505050565b600061212e61212984612b48565b612b23565b90508281526020810184848401111561214657600080fd5b612151848285612c8e565b509392505050565b60008135905061216881613199565b92915050565b60008135905061217d816131b0565b92915050565b600081519050612192816131b0565b92915050565b600082601f8301126121a957600080fd5b81356121b98482602086016120dd565b91505092915050565b600082601f8301126121d357600080fd5b81516121e384826020860161211b565b91505092915050565b6000813590506121fb816131c7565b92915050565b600081519050612210816131de565b92915050565b60006020828403121561222857600080fd5b600061223684828501612159565b91505092915050565b6000806040838503121561225257600080fd5b600061226085828601612159565b925050602061227185828601612159565b9150509250929050565b60008060006060848603121561229057600080fd5b600061229e86828701612159565b93505060206122af86828701612159565b92505060406122c0868287016121ec565b9150509250925092565b6000806000606084860312156122df57600080fd5b60006122ed86828701612159565b935050602084013567ffffffffffffffff81111561230a57600080fd5b61231686828701612198565b9250506040612327868287016121ec565b9150509250925092565b6000806040838503121561234457600080fd5b600061235285828601612159565b9250506020612363858286016121ec565b9150509250929050565b60006020828403121561237f57600080fd5b600061238d8482850161216e565b91505092915050565b6000602082840312156123a857600080fd5b60006123b684828501612183565b91505092915050565b6000602082840312156123d157600080fd5b600082013567ffffffffffffffff8111156123eb57600080fd5b6123f784828501612198565b91505092915050565b60006020828403121561241257600080fd5b600082015167ffffffffffffffff81111561242c57600080fd5b612438848285016121c2565b91505092915050565b60006020828403121561245357600080fd5b6000612461848285016121ec565b91505092915050565b6000806040838503121561247d57600080fd5b600061248b858286016121ec565b925050602061249c85828601612159565b9150509250929050565b6000602082840312156124b857600080fd5b60006124c684828501612201565b91505092915050565b6124d881612c2a565b82525050565b6124e781612c3c565b82525050565b60006124f882612b79565b6125028185612b8f565b9350612512818560208601612c8e565b61251b81612d50565b840191505092915050565b6000612533602a83612b8f565b915061253e82612d61565b604082019050919050565b6000612556601f83612b8f565b915061256182612db0565b602082019050919050565b6000612579602683612b8f565b915061258482612dd9565b604082019050919050565b600061259c604583612b8f565b91506125a782612e28565b606082019050919050565b60006125bf602083612b8f565b91506125ca82612e9d565b602082019050919050565b60006125e2602283612b8f565b91506125ed82612ec6565b604082019050919050565b6000612605601283612b8f565b915061261082612f15565b602082019050919050565b6000612628602083612b8f565b915061263382612f3e565b602082019050919050565b600061264b602b83612b8f565b915061265682612f67565b604082019050919050565b600061266e602783612b8f565b915061267982612fb6565b604082019050919050565b6000612691602683612b8f565b915061269c82613005565b604082019050919050565b60006126b4602583612b8f565b91506126bf82613054565b604082019050919050565b60006126d7601a83612b8f565b91506126e2826130a3565b602082019050919050565b60006126fa600083612b84565b9150612705826130cc565b600082019050919050565b600061271d601883612b8f565b9150612728826130cf565b602082019050919050565b6000612740601d83612b8f565b915061274b826130f8565b602082019050919050565b6000612763602f83612b8f565b915061276e82613121565b604082019050919050565b6000612786601a83612b8f565b915061279182613170565b602082019050919050565b6127a581612c68565b82525050565b6127b481612c72565b82525050565b60006127c5826126ed565b9150819050919050565b60006020820190506127e460008301846124cf565b92915050565b60006060820190506127ff60008301866124cf565b61280c60208301856124cf565b612819604083018461279c565b949350505050565b600060408201905061283660008301856124cf565b612843602083018461279c565b9392505050565b600060208201905061285f60008301846124de565b92915050565b6000604082019050818103600083015261287f81856124ed565b905061288e602083018461279c565b9392505050565b600060808201905081810360008301526128af81876124ed565b90506128be602083018661279c565b81810360408301526128d081856124ed565b90506128df60608301846127ab565b95945050505050565b6000602082019050818103600083015261290181612526565b9050919050565b6000602082019050818103600083015261292181612549565b9050919050565b600060208201905081810360008301526129418161256c565b9050919050565b600060208201905081810360008301526129618161258f565b9050919050565b60006020820190508181036000830152612981816125b2565b9050919050565b600060208201905081810360008301526129a1816125d5565b9050919050565b600060208201905081810360008301526129c1816125f8565b9050919050565b600060208201905081810360008301526129e18161261b565b9050919050565b60006020820190508181036000830152612a018161263e565b9050919050565b60006020820190508181036000830152612a2181612661565b9050919050565b60006020820190508181036000830152612a4181612684565b9050919050565b60006020820190508181036000830152612a61816126a7565b9050919050565b60006020820190508181036000830152612a81816126ca565b9050919050565b60006020820190508181036000830152612aa181612710565b9050919050565b60006020820190508181036000830152612ac181612733565b9050919050565b60006020820190508181036000830152612ae181612756565b9050919050565b60006020820190508181036000830152612b0181612779565b9050919050565b6000602082019050612b1d600083018461279c565b92915050565b6000612b2d612b3e565b9050612b398282612cc1565b919050565b6000604051905090565b600067ffffffffffffffff821115612b6357612b62612d21565b5b612b6c82612d50565b9050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000612bab82612c68565b9150612bb683612c68565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612beb57612bea612cf2565b5b828201905092915050565b6000612c0182612c68565b9150612c0c83612c68565b925082821015612c1f57612c1e612cf2565b5b828203905092915050565b6000612c3582612c48565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015612cac578082015181840152602081019050612c91565b83811115612cbb576000848401525b50505050565b612cca82612d50565b810181811067ffffffffffffffff82111715612ce957612ce8612d21565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f496e73756666696369656e742066756e647320746f206465706f73697420636f60008201527f6d70656e736174696f6e00000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f207472616e7366657220636c61696d6564204554482e00600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c69642076616c756520666f7220746865206465706f73697420616d60008201527f6f756e742c206661696c656420746f206465706f7369742061207a65726f207660208201527f616c75652e000000000000000000000000000000000000000000000000000000604082015250565b7f4661696c656420746f207472616e73666572206c6f636b65642045524332302e600082015250565b7f4661696c656420746f207472616e7366657220636c61696d656420616d6f756e60008201527f742e000000000000000000000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f20706179206261636b0000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f496e73756666696369656e742066756e647320666f72206465706f736974206360008201527f6f6d70656e736174696f6e000000000000000000000000000000000000000000602082015250565b7f4974206973206e6f7420616c6c6f77656420746f20636c61696d206c6f636b6560008201527f642066756e647300000000000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f20706179206261636b20746865206465706f736974206160008201527f6d6f756e742e0000000000000000000000000000000000000000000000000000602082015250565b7f556e737570706f7274656420746f6b656e2c206661696c656420746f2064657060008201527f6f7369742e000000000000000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f207472616e7366657220746f6b656e732e000000000000600082015250565b50565b7f496e73756666696369656e74206c6f636b6564204554482e0000000000000000600082015250565b7f476976656e20746f6b656e206973206e6f74206120636f6e7472616374000000600082015250565b7f4661696c656420746f207061792074686520636f6d70656e736174696f6e206660008201527f6f7220706179696e67206261636b2e0000000000000000000000000000000000602082015250565b7f496e73756666696369656e74206c6f636b65642045524332302e000000000000600082015250565b6131a281612c2a565b81146131ad57600080fd5b50565b6131b981612c3c565b81146131c457600080fd5b50565b6131d081612c68565b81146131db57600080fd5b50565b6131e781612c72565b81146131f257600080fd5b5056fea26469706673582212204dfd1e768d94e6dd8940c43802ab961ce9f6636e3d82a70b8b77dea4afcffbb864736f6c63430008030033"

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend, _supportedTokens []common.Address, _depositCompensation *big.Int, _allowanceToLockFunds bool, _allowanceToClaimLockedFunds bool) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BridgeBin), backend, _supportedTokens, _depositCompensation, _allowanceToLockFunds, _allowanceToClaimLockedFunds)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// CompensationDeposited is a free data retrieval call binding the contract method 0x34c15e28.
//
// Solidity: function compensationDeposited(address ) view returns(bool)
func (_Bridge *BridgeCaller) CompensationDeposited(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "compensationDeposited", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CompensationDeposited is a free data retrieval call binding the contract method 0x34c15e28.
//
// Solidity: function compensationDeposited(address ) view returns(bool)
func (_Bridge *BridgeSession) CompensationDeposited(arg0 common.Address) (bool, error) {
	return _Bridge.Contract.CompensationDeposited(&_Bridge.CallOpts, arg0)
}

// CompensationDeposited is a free data retrieval call binding the contract method 0x34c15e28.
//
// Solidity: function compensationDeposited(address ) view returns(bool)
func (_Bridge *BridgeCallerSession) CompensationDeposited(arg0 common.Address) (bool, error) {
	return _Bridge.Contract.CompensationDeposited(&_Bridge.CallOpts, arg0)
}

// DepositCompensation is a free data retrieval call binding the contract method 0x994f5a77.
//
// Solidity: function depositCompensation() view returns(uint256)
func (_Bridge *BridgeCaller) DepositCompensation(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "depositCompensation")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DepositCompensation is a free data retrieval call binding the contract method 0x994f5a77.
//
// Solidity: function depositCompensation() view returns(uint256)
func (_Bridge *BridgeSession) DepositCompensation() (*big.Int, error) {
	return _Bridge.Contract.DepositCompensation(&_Bridge.CallOpts)
}

// DepositCompensation is a free data retrieval call binding the contract method 0x994f5a77.
//
// Solidity: function depositCompensation() view returns(uint256)
func (_Bridge *BridgeCallerSession) DepositCompensation() (*big.Int, error) {
	return _Bridge.Contract.DepositCompensation(&_Bridge.CallOpts)
}

// LockedERC20 is a free data retrieval call binding the contract method 0xd35b7801.
//
// Solidity: function lockedERC20(address , address ) view returns(uint256)
func (_Bridge *BridgeCaller) LockedERC20(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "lockedERC20", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LockedERC20 is a free data retrieval call binding the contract method 0xd35b7801.
//
// Solidity: function lockedERC20(address , address ) view returns(uint256)
func (_Bridge *BridgeSession) LockedERC20(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Bridge.Contract.LockedERC20(&_Bridge.CallOpts, arg0, arg1)
}

// LockedERC20 is a free data retrieval call binding the contract method 0xd35b7801.
//
// Solidity: function lockedERC20(address , address ) view returns(uint256)
func (_Bridge *BridgeCallerSession) LockedERC20(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Bridge.Contract.LockedERC20(&_Bridge.CallOpts, arg0, arg1)
}

// LockedETH is a free data retrieval call binding the contract method 0x0d55f6b2.
//
// Solidity: function lockedETH(address ) view returns(uint256)
func (_Bridge *BridgeCaller) LockedETH(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "lockedETH", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LockedETH is a free data retrieval call binding the contract method 0x0d55f6b2.
//
// Solidity: function lockedETH(address ) view returns(uint256)
func (_Bridge *BridgeSession) LockedETH(arg0 common.Address) (*big.Int, error) {
	return _Bridge.Contract.LockedETH(&_Bridge.CallOpts, arg0)
}

// LockedETH is a free data retrieval call binding the contract method 0x0d55f6b2.
//
// Solidity: function lockedETH(address ) view returns(uint256)
func (_Bridge *BridgeCallerSession) LockedETH(arg0 common.Address) (*big.Int, error) {
	return _Bridge.Contract.LockedETH(&_Bridge.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeSession) Owner() (common.Address, error) {
	return _Bridge.Contract.Owner(&_Bridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeCallerSession) Owner() (common.Address, error) {
	return _Bridge.Contract.Owner(&_Bridge.CallOpts)
}

// SupportedTokens is a free data retrieval call binding the contract method 0x68c4ac26.
//
// Solidity: function supportedTokens(address ) view returns(bool)
func (_Bridge *BridgeCaller) SupportedTokens(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "supportedTokens", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportedTokens is a free data retrieval call binding the contract method 0x68c4ac26.
//
// Solidity: function supportedTokens(address ) view returns(bool)
func (_Bridge *BridgeSession) SupportedTokens(arg0 common.Address) (bool, error) {
	return _Bridge.Contract.SupportedTokens(&_Bridge.CallOpts, arg0)
}

// SupportedTokens is a free data retrieval call binding the contract method 0x68c4ac26.
//
// Solidity: function supportedTokens(address ) view returns(bool)
func (_Bridge *BridgeCallerSession) SupportedTokens(arg0 common.Address) (bool, error) {
	return _Bridge.Contract.SupportedTokens(&_Bridge.CallOpts, arg0)
}

// AddToken is a paid mutator transaction binding the contract method 0xd48bfca7.
//
// Solidity: function addToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactor) AddToken(opts *bind.TransactOpts, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "addToken", _tokenAddress)
}

// AddToken is a paid mutator transaction binding the contract method 0xd48bfca7.
//
// Solidity: function addToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeSession) AddToken(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AddToken(&_Bridge.TransactOpts, _tokenAddress)
}

// AddToken is a paid mutator transaction binding the contract method 0xd48bfca7.
//
// Solidity: function addToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactorSession) AddToken(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AddToken(&_Bridge.TransactOpts, _tokenAddress)
}

// ClaimContractERC20 is a paid mutator transaction binding the contract method 0xfe0dde62.
//
// Solidity: function claimContractERC20(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactor) ClaimContractERC20(opts *bind.TransactOpts, _claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claimContractERC20", _claimableAmount, _tokenAddress)
}

// ClaimContractERC20 is a paid mutator transaction binding the contract method 0xfe0dde62.
//
// Solidity: function claimContractERC20(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeSession) ClaimContractERC20(_claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimContractERC20(&_Bridge.TransactOpts, _claimableAmount, _tokenAddress)
}

// ClaimContractERC20 is a paid mutator transaction binding the contract method 0xfe0dde62.
//
// Solidity: function claimContractERC20(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactorSession) ClaimContractERC20(_claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimContractERC20(&_Bridge.TransactOpts, _claimableAmount, _tokenAddress)
}

// ClaimContractETH is a paid mutator transaction binding the contract method 0x3155c58a.
//
// Solidity: function claimContractETH(uint256 _claimableAmount) returns(bool)
func (_Bridge *BridgeTransactor) ClaimContractETH(opts *bind.TransactOpts, _claimableAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claimContractETH", _claimableAmount)
}

// ClaimContractETH is a paid mutator transaction binding the contract method 0x3155c58a.
//
// Solidity: function claimContractETH(uint256 _claimableAmount) returns(bool)
func (_Bridge *BridgeSession) ClaimContractETH(_claimableAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimContractETH(&_Bridge.TransactOpts, _claimableAmount)
}

// ClaimContractETH is a paid mutator transaction binding the contract method 0x3155c58a.
//
// Solidity: function claimContractETH(uint256 _claimableAmount) returns(bool)
func (_Bridge *BridgeTransactorSession) ClaimContractETH(_claimableAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimContractETH(&_Bridge.TransactOpts, _claimableAmount)
}

// ClaimLockedERC20 is a paid mutator transaction binding the contract method 0xf99f28ee.
//
// Solidity: function claimLockedERC20(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactor) ClaimLockedERC20(opts *bind.TransactOpts, _claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claimLockedERC20", _claimableAmount, _tokenAddress)
}

// ClaimLockedERC20 is a paid mutator transaction binding the contract method 0xf99f28ee.
//
// Solidity: function claimLockedERC20(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeSession) ClaimLockedERC20(_claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimLockedERC20(&_Bridge.TransactOpts, _claimableAmount, _tokenAddress)
}

// ClaimLockedERC20 is a paid mutator transaction binding the contract method 0xf99f28ee.
//
// Solidity: function claimLockedERC20(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactorSession) ClaimLockedERC20(_claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimLockedERC20(&_Bridge.TransactOpts, _claimableAmount, _tokenAddress)
}

// ClaimLockedETH is a paid mutator transaction binding the contract method 0x49ca86d5.
//
// Solidity: function claimLockedETH(uint256 _claimableAmount) returns(bool)
func (_Bridge *BridgeTransactor) ClaimLockedETH(opts *bind.TransactOpts, _claimableAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claimLockedETH", _claimableAmount)
}

// ClaimLockedETH is a paid mutator transaction binding the contract method 0x49ca86d5.
//
// Solidity: function claimLockedETH(uint256 _claimableAmount) returns(bool)
func (_Bridge *BridgeSession) ClaimLockedETH(_claimableAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimLockedETH(&_Bridge.TransactOpts, _claimableAmount)
}

// ClaimLockedETH is a paid mutator transaction binding the contract method 0x49ca86d5.
//
// Solidity: function claimLockedETH(uint256 _claimableAmount) returns(bool)
func (_Bridge *BridgeTransactorSession) ClaimLockedETH(_claimableAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimLockedETH(&_Bridge.TransactOpts, _claimableAmount)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x7288f11a.
//
// Solidity: function depositERC20(address _tokenAddress, string _odinAddress, uint256 _depositAmount) payable returns(bool)
func (_Bridge *BridgeTransactor) DepositERC20(opts *bind.TransactOpts, _tokenAddress common.Address, _odinAddress string, _depositAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "depositERC20", _tokenAddress, _odinAddress, _depositAmount)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x7288f11a.
//
// Solidity: function depositERC20(address _tokenAddress, string _odinAddress, uint256 _depositAmount) payable returns(bool)
func (_Bridge *BridgeSession) DepositERC20(_tokenAddress common.Address, _odinAddress string, _depositAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.DepositERC20(&_Bridge.TransactOpts, _tokenAddress, _odinAddress, _depositAmount)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x7288f11a.
//
// Solidity: function depositERC20(address _tokenAddress, string _odinAddress, uint256 _depositAmount) payable returns(bool)
func (_Bridge *BridgeTransactorSession) DepositERC20(_tokenAddress common.Address, _odinAddress string, _depositAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.DepositERC20(&_Bridge.TransactOpts, _tokenAddress, _odinAddress, _depositAmount)
}

// DepositETH is a paid mutator transaction binding the contract method 0x9b1c48e6.
//
// Solidity: function depositETH(string _odinAddress) payable returns(bool)
func (_Bridge *BridgeTransactor) DepositETH(opts *bind.TransactOpts, _odinAddress string) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "depositETH", _odinAddress)
}

// DepositETH is a paid mutator transaction binding the contract method 0x9b1c48e6.
//
// Solidity: function depositETH(string _odinAddress) payable returns(bool)
func (_Bridge *BridgeSession) DepositETH(_odinAddress string) (*types.Transaction, error) {
	return _Bridge.Contract.DepositETH(&_Bridge.TransactOpts, _odinAddress)
}

// DepositETH is a paid mutator transaction binding the contract method 0x9b1c48e6.
//
// Solidity: function depositETH(string _odinAddress) payable returns(bool)
func (_Bridge *BridgeTransactorSession) DepositETH(_odinAddress string) (*types.Transaction, error) {
	return _Bridge.Contract.DepositETH(&_Bridge.TransactOpts, _odinAddress)
}

// PayBackERC20 is a paid mutator transaction binding the contract method 0x9371388d.
//
// Solidity: function payBackERC20(address _user, address _tokenAddress, uint256 _amount) returns(bool)
func (_Bridge *BridgeTransactor) PayBackERC20(opts *bind.TransactOpts, _user common.Address, _tokenAddress common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "payBackERC20", _user, _tokenAddress, _amount)
}

// PayBackERC20 is a paid mutator transaction binding the contract method 0x9371388d.
//
// Solidity: function payBackERC20(address _user, address _tokenAddress, uint256 _amount) returns(bool)
func (_Bridge *BridgeSession) PayBackERC20(_user common.Address, _tokenAddress common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.PayBackERC20(&_Bridge.TransactOpts, _user, _tokenAddress, _amount)
}

// PayBackERC20 is a paid mutator transaction binding the contract method 0x9371388d.
//
// Solidity: function payBackERC20(address _user, address _tokenAddress, uint256 _amount) returns(bool)
func (_Bridge *BridgeTransactorSession) PayBackERC20(_user common.Address, _tokenAddress common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.PayBackERC20(&_Bridge.TransactOpts, _user, _tokenAddress, _amount)
}

// PayBackETH is a paid mutator transaction binding the contract method 0xc7b77eb0.
//
// Solidity: function payBackETH(address _user, uint256 _amount) returns(bool)
func (_Bridge *BridgeTransactor) PayBackETH(opts *bind.TransactOpts, _user common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "payBackETH", _user, _amount)
}

// PayBackETH is a paid mutator transaction binding the contract method 0xc7b77eb0.
//
// Solidity: function payBackETH(address _user, uint256 _amount) returns(bool)
func (_Bridge *BridgeSession) PayBackETH(_user common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.PayBackETH(&_Bridge.TransactOpts, _user, _amount)
}

// PayBackETH is a paid mutator transaction binding the contract method 0xc7b77eb0.
//
// Solidity: function payBackETH(address _user, uint256 _amount) returns(bool)
func (_Bridge *BridgeTransactorSession) PayBackETH(_user common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.PayBackETH(&_Bridge.TransactOpts, _user, _amount)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactor) RemoveToken(opts *bind.TransactOpts, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "removeToken", _tokenAddress)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeSession) RemoveToken(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RemoveToken(&_Bridge.TransactOpts, _tokenAddress)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactorSession) RemoveToken(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RemoveToken(&_Bridge.TransactOpts, _tokenAddress)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bridge.Contract.RenounceOwnership(&_Bridge.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bridge.Contract.RenounceOwnership(&_Bridge.TransactOpts)
}

// SetAllowanceToClaimLockedFunds is a paid mutator transaction binding the contract method 0x8ef37c48.
//
// Solidity: function setAllowanceToClaimLockedFunds(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactor) SetAllowanceToClaimLockedFunds(opts *bind.TransactOpts, _allowed bool) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setAllowanceToClaimLockedFunds", _allowed)
}

// SetAllowanceToClaimLockedFunds is a paid mutator transaction binding the contract method 0x8ef37c48.
//
// Solidity: function setAllowanceToClaimLockedFunds(bool _allowed) returns(bool)
func (_Bridge *BridgeSession) SetAllowanceToClaimLockedFunds(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToClaimLockedFunds(&_Bridge.TransactOpts, _allowed)
}

// SetAllowanceToClaimLockedFunds is a paid mutator transaction binding the contract method 0x8ef37c48.
//
// Solidity: function setAllowanceToClaimLockedFunds(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactorSession) SetAllowanceToClaimLockedFunds(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToClaimLockedFunds(&_Bridge.TransactOpts, _allowed)
}

// SetAllowanceToLock is a paid mutator transaction binding the contract method 0xa8d275cc.
//
// Solidity: function setAllowanceToLock(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactor) SetAllowanceToLock(opts *bind.TransactOpts, _allowed bool) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setAllowanceToLock", _allowed)
}

// SetAllowanceToLock is a paid mutator transaction binding the contract method 0xa8d275cc.
//
// Solidity: function setAllowanceToLock(bool _allowed) returns(bool)
func (_Bridge *BridgeSession) SetAllowanceToLock(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToLock(&_Bridge.TransactOpts, _allowed)
}

// SetAllowanceToLock is a paid mutator transaction binding the contract method 0xa8d275cc.
//
// Solidity: function setAllowanceToLock(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactorSession) SetAllowanceToLock(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToLock(&_Bridge.TransactOpts, _allowed)
}

// SetDepositCompensation is a paid mutator transaction binding the contract method 0xbe20e539.
//
// Solidity: function setDepositCompensation(uint256 _compensationAmount) returns(bool)
func (_Bridge *BridgeTransactor) SetDepositCompensation(opts *bind.TransactOpts, _compensationAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setDepositCompensation", _compensationAmount)
}

// SetDepositCompensation is a paid mutator transaction binding the contract method 0xbe20e539.
//
// Solidity: function setDepositCompensation(uint256 _compensationAmount) returns(bool)
func (_Bridge *BridgeSession) SetDepositCompensation(_compensationAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.SetDepositCompensation(&_Bridge.TransactOpts, _compensationAmount)
}

// SetDepositCompensation is a paid mutator transaction binding the contract method 0xbe20e539.
//
// Solidity: function setDepositCompensation(uint256 _compensationAmount) returns(bool)
func (_Bridge *BridgeTransactorSession) SetDepositCompensation(_compensationAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.SetDepositCompensation(&_Bridge.TransactOpts, _compensationAmount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOwnership(&_Bridge.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOwnership(&_Bridge.TransactOpts, newOwner)
}

// BridgeERC20DepositedIterator is returned from FilterERC20Deposited and is used to iterate over the raw logs and unpacked data for ERC20Deposited events raised by the Bridge contract.
type BridgeERC20DepositedIterator struct {
	Event *BridgeERC20Deposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeERC20DepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeERC20Deposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeERC20Deposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeERC20DepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeERC20DepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeERC20Deposited represents a ERC20Deposited event raised by the Bridge contract.
type BridgeERC20Deposited struct {
	UserAddress    common.Address
	OdinAddress    string
	DepositAmount  *big.Int
	TokenAddress   common.Address
	Symbol         string
	TokenPrecision uint8
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterERC20Deposited is a free log retrieval operation binding the contract event 0x380818a686b3749c864e4fe5b344c0fd3e0681231881695473b42c2c84d7271d.
//
// Solidity: event ERC20Deposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount, address indexed _tokenAddress, string _symbol, uint8 _tokenPrecision)
func (_Bridge *BridgeFilterer) FilterERC20Deposited(opts *bind.FilterOpts, _userAddress []common.Address, _tokenAddress []common.Address) (*BridgeERC20DepositedIterator, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ERC20Deposited", _userAddressRule, _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeERC20DepositedIterator{contract: _Bridge.contract, event: "ERC20Deposited", logs: logs, sub: sub}, nil
}

// WatchERC20Deposited is a free log subscription operation binding the contract event 0x380818a686b3749c864e4fe5b344c0fd3e0681231881695473b42c2c84d7271d.
//
// Solidity: event ERC20Deposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount, address indexed _tokenAddress, string _symbol, uint8 _tokenPrecision)
func (_Bridge *BridgeFilterer) WatchERC20Deposited(opts *bind.WatchOpts, sink chan<- *BridgeERC20Deposited, _userAddress []common.Address, _tokenAddress []common.Address) (event.Subscription, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ERC20Deposited", _userAddressRule, _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeERC20Deposited)
				if err := _Bridge.contract.UnpackLog(event, "ERC20Deposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseERC20Deposited is a log parse operation binding the contract event 0x380818a686b3749c864e4fe5b344c0fd3e0681231881695473b42c2c84d7271d.
//
// Solidity: event ERC20Deposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount, address indexed _tokenAddress, string _symbol, uint8 _tokenPrecision)
func (_Bridge *BridgeFilterer) ParseERC20Deposited(log types.Log) (*BridgeERC20Deposited, error) {
	event := new(BridgeERC20Deposited)
	if err := _Bridge.contract.UnpackLog(event, "ERC20Deposited", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeETHDepositedIterator is returned from FilterETHDeposited and is used to iterate over the raw logs and unpacked data for ETHDeposited events raised by the Bridge contract.
type BridgeETHDepositedIterator struct {
	Event *BridgeETHDeposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeETHDepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeETHDeposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeETHDeposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeETHDepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeETHDepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeETHDeposited represents a ETHDeposited event raised by the Bridge contract.
type BridgeETHDeposited struct {
	UserAddress   common.Address
	OdinAddress   string
	DepositAmount *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterETHDeposited is a free log retrieval operation binding the contract event 0xa5ee847b808915e440e213630058643951dfa817cd585254162b8e69b71fa432.
//
// Solidity: event ETHDeposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount)
func (_Bridge *BridgeFilterer) FilterETHDeposited(opts *bind.FilterOpts, _userAddress []common.Address) (*BridgeETHDepositedIterator, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ETHDeposited", _userAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeETHDepositedIterator{contract: _Bridge.contract, event: "ETHDeposited", logs: logs, sub: sub}, nil
}

// WatchETHDeposited is a free log subscription operation binding the contract event 0xa5ee847b808915e440e213630058643951dfa817cd585254162b8e69b71fa432.
//
// Solidity: event ETHDeposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount)
func (_Bridge *BridgeFilterer) WatchETHDeposited(opts *bind.WatchOpts, sink chan<- *BridgeETHDeposited, _userAddress []common.Address) (event.Subscription, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ETHDeposited", _userAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeETHDeposited)
				if err := _Bridge.contract.UnpackLog(event, "ETHDeposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseETHDeposited is a log parse operation binding the contract event 0xa5ee847b808915e440e213630058643951dfa817cd585254162b8e69b71fa432.
//
// Solidity: event ETHDeposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount)
func (_Bridge *BridgeFilterer) ParseETHDeposited(log types.Log) (*BridgeETHDeposited, error) {
	event := new(BridgeETHDeposited)
	if err := _Bridge.contract.UnpackLog(event, "ETHDeposited", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Bridge contract.
type BridgeOwnershipTransferredIterator struct {
	Event *BridgeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeOwnershipTransferred represents a OwnershipTransferred event raised by the Bridge contract.
type BridgeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BridgeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeOwnershipTransferredIterator{contract: _Bridge.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BridgeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeOwnershipTransferred)
				if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) ParseOwnershipTransferred(log types.Log) (*BridgeOwnershipTransferred, error) {
	event := new(BridgeOwnershipTransferred)
	if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTokenAddedIterator is returned from FilterTokenAdded and is used to iterate over the raw logs and unpacked data for TokenAdded events raised by the Bridge contract.
type BridgeTokenAddedIterator struct {
	Event *BridgeTokenAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTokenAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTokenAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTokenAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTokenAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTokenAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTokenAdded represents a TokenAdded event raised by the Bridge contract.
type BridgeTokenAdded struct {
	TokenAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterTokenAdded is a free log retrieval operation binding the contract event 0x784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a4.
//
// Solidity: event TokenAdded(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) FilterTokenAdded(opts *bind.FilterOpts, _tokenAddress []common.Address) (*BridgeTokenAddedIterator, error) {

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "TokenAdded", _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeTokenAddedIterator{contract: _Bridge.contract, event: "TokenAdded", logs: logs, sub: sub}, nil
}

// WatchTokenAdded is a free log subscription operation binding the contract event 0x784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a4.
//
// Solidity: event TokenAdded(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) WatchTokenAdded(opts *bind.WatchOpts, sink chan<- *BridgeTokenAdded, _tokenAddress []common.Address) (event.Subscription, error) {

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "TokenAdded", _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTokenAdded)
				if err := _Bridge.contract.UnpackLog(event, "TokenAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenAdded is a log parse operation binding the contract event 0x784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a4.
//
// Solidity: event TokenAdded(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) ParseTokenAdded(log types.Log) (*BridgeTokenAdded, error) {
	event := new(BridgeTokenAdded)
	if err := _Bridge.contract.UnpackLog(event, "TokenAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTokenRemovedIterator is returned from FilterTokenRemoved and is used to iterate over the raw logs and unpacked data for TokenRemoved events raised by the Bridge contract.
type BridgeTokenRemovedIterator struct {
	Event *BridgeTokenRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTokenRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTokenRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTokenRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTokenRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTokenRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTokenRemoved represents a TokenRemoved event raised by the Bridge contract.
type BridgeTokenRemoved struct {
	TokenAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterTokenRemoved is a free log retrieval operation binding the contract event 0x4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3.
//
// Solidity: event TokenRemoved(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) FilterTokenRemoved(opts *bind.FilterOpts, _tokenAddress []common.Address) (*BridgeTokenRemovedIterator, error) {

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "TokenRemoved", _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeTokenRemovedIterator{contract: _Bridge.contract, event: "TokenRemoved", logs: logs, sub: sub}, nil
}

// WatchTokenRemoved is a free log subscription operation binding the contract event 0x4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3.
//
// Solidity: event TokenRemoved(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) WatchTokenRemoved(opts *bind.WatchOpts, sink chan<- *BridgeTokenRemoved, _tokenAddress []common.Address) (event.Subscription, error) {

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "TokenRemoved", _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTokenRemoved)
				if err := _Bridge.contract.UnpackLog(event, "TokenRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenRemoved is a log parse operation binding the contract event 0x4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3.
//
// Solidity: event TokenRemoved(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) ParseTokenRemoved(log types.Log) (*BridgeTokenRemoved, error) {
	event := new(BridgeTokenRemoved)
	if err := _Bridge.contract.UnpackLog(event, "TokenRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
