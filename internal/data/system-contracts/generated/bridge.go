// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package generated

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// BridgeABI is the input ABI used to generate the binding from.
const BridgeABI = "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_supportedTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_refundFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_depositingAllowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_lockingFundsAllowed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_claimingLockedFundsAllowed\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_odinAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_tokenPrecision\",\"type\":\"uint8\"}],\"name\":\"ERC20Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_odinAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"ETHDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"addToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"claimContractERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimableAmount\",\"type\":\"uint256\"}],\"name\":\"claimContractETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"claimLockedERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimableAmount\",\"type\":\"uint256\"}],\"name\":\"claimLockedETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_odinAddress\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"depositERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_odinAddress\",\"type\":\"string\"}],\"name\":\"depositETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedERC20\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"payBackERC20\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"payBackETH\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"refundFeeDeposited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowanceToClaimLockedFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowanceToDeposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowanceToLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_refundFee\",\"type\":\"uint256\"}],\"name\":\"setRefundFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// BridgeBin is the compiled bytecode used for deploying new contracts.
var BridgeBin = "0x60806040523480156200001157600080fd5b506040516200399a3803806200399a8339818101604052810190620000379190620002f2565b6000620000496200020360201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35060005b8551811015620001a35760016006600088848151811062000134577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806200019a9062000465565b915050620000ea565b508360018190555082600260006101000a81548160ff02191690831515021790555081600260016101000a81548160ff021916908315150217905550806002806101000a81548160ff021916908315150217905550505050505062000570565b600033905090565b6000620002226200021c84620003b6565b6200038d565b905080838252602082019050828560208602820111156200024257600080fd5b60005b858110156200027657816200025b888262000280565b84526020840193506020830192505060018101905062000245565b5050509392505050565b600081519050620002918162000522565b92915050565b600082601f830112620002a957600080fd5b8151620002bb8482602086016200020b565b91505092915050565b600081519050620002d5816200053c565b92915050565b600081519050620002ec8162000556565b92915050565b600080600080600060a086880312156200030b57600080fd5b600086015167ffffffffffffffff8111156200032657600080fd5b620003348882890162000297565b95505060206200034788828901620002db565b94505060406200035a88828901620002c4565b93505060606200036d88828901620002c4565b92505060806200038088828901620002c4565b9150509295509295909350565b600062000399620003ac565b9050620003a782826200042f565b919050565b6000604051905090565b600067ffffffffffffffff821115620003d457620003d3620004e2565b5b602082029050602081019050919050565b6000620003f28262000405565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6200043a8262000511565b810181811067ffffffffffffffff821117156200045c576200045b620004e2565b5b80604052505050565b6000620004728262000425565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620004a857620004a7620004b3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6200052d81620003e5565b81146200053957600080fd5b50565b6200054781620003f9565b81146200055357600080fd5b50565b620005618162000425565b81146200056d57600080fd5b50565b61341a80620005806000396000f3fe6080604052600436106101355760003560e01c806390fe6ddb116100ab578063d0fd1de11161006f578063d0fd1de1146104a6578063d35b7801146104e3578063d48bfca714610520578063f2fde38b1461055d578063f99f28ee14610586578063fe0dde62146105c357610135565b806390fe6ddb146103945780639371388d146103bf5780639b1c48e6146103fc578063a8d275cc1461042c578063c7b77eb01461046957610135565b806368c4ac26116100fd57806368c4ac261461026b578063715018a6146102a85780637288f11a146102bf57806384f5af34146102ef5780638da5cb5b1461032c5780638ef37c481461035757610135565b80630d55f6b21461013a5780633155c58a1461017757806336fd711e146101b457806349ca86d5146101f15780635fa7b5841461022e575b600080fd5b34801561014657600080fd5b50610161600480360381019061015c9190612399565b610600565b60405161016e9190612cce565b60405180910390f35b34801561018357600080fd5b5061019e600480360381019061019991906125c4565b610618565b6040516101ab91906129f0565b60405180910390f35b3480156101c057600080fd5b506101db60048036038101906101d691906125c4565b61074c565b6040516101e891906129f0565b60405180910390f35b3480156101fd57600080fd5b50610218600480360381019061021391906125c4565b6107da565b60405161022591906129f0565b60405180910390f35b34801561023a57600080fd5b5061025560048036038101906102509190612399565b6109bd565b60405161026291906129f0565b60405180910390f35b34801561027757600080fd5b50610292600480360381019061028d9190612399565b610adf565b60405161029f91906129f0565b60405180910390f35b3480156102b457600080fd5b506102bd610aff565b005b6102d960048036038101906102d4919061244d565b610c39565b6040516102e691906129f0565b60405180910390f35b3480156102fb57600080fd5b5061031660048036038101906103119190612399565b6111d7565b60405161032391906129f0565b60405180910390f35b34801561033857600080fd5b506103416111f7565b60405161034e9190612975565b60405180910390f35b34801561036357600080fd5b5061037e600480360381019061037991906124f0565b611220565b60405161038b91906129f0565b60405180910390f35b3480156103a057600080fd5b506103a96112c0565b6040516103b69190612cce565b60405180910390f35b3480156103cb57600080fd5b506103e660048036038101906103e191906123fe565b6112c6565b6040516103f391906129f0565b60405180910390f35b61041660048036038101906104119190612542565b611527565b60405161042391906129f0565b60405180910390f35b34801561043857600080fd5b50610453600480360381019061044e91906124f0565b6117cf565b60405161046091906129f0565b60405180910390f35b34801561047557600080fd5b50610490600480360381019061048b91906124b4565b611870565b60405161049d91906129f0565b60405180910390f35b3480156104b257600080fd5b506104cd60048036038101906104c891906124f0565b611aab565b6040516104da91906129f0565b60405180910390f35b3480156104ef57600080fd5b5061050a600480360381019061050591906123c2565b611b4c565b6040516105179190612cce565b60405180910390f35b34801561052c57600080fd5b5061054760048036038101906105429190612399565b611b71565b60405161055491906129f0565b60405180910390f35b34801561056957600080fd5b50610584600480360381019061057f9190612399565b611c93565b005b34801561059257600080fd5b506105ad60048036038101906105a891906125ed565b611e3c565b6040516105ba91906129f0565b60405180910390f35b3480156105cf57600080fd5b506105ea60048036038101906105e591906125ed565b6120bf565b6040516105f791906129f0565b60405180910390f35b60036020528060005260406000206000915090505481565b6000610622612219565b73ffffffffffffffffffffffffffffffffffffffff166106406111f7565b73ffffffffffffffffffffffffffffffffffffffff1614610696576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068d90612b8e565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16836040516106bc90612960565b60006040518083038185875af1925050503d80600081146106f9576040519150601f19603f3d011682016040523d82523d6000602084013e6106fe565b606091505b5050905080610742576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073990612b4e565b60405180910390fd5b6001915050919050565b6000610756612219565b73ffffffffffffffffffffffffffffffffffffffff166107746111f7565b73ffffffffffffffffffffffffffffffffffffffff16146107ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c190612b8e565b60405180910390fd5b8160018190555060019050919050565b600060028054906101000a900460ff16610829576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082090612c2e565b60405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808311156108b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a790612c4e565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16846040516108d690612960565b60006040518083038185875af1925050503d8060008114610913576040519150601f19603f3d011682016040523d82523d6000602084013e610918565b606091505b505090508061095c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095390612ace565b60405180910390fd5b61096f848361222190919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600192505050919050565b60006109c7612219565b73ffffffffffffffffffffffffffffffffffffffff166109e56111f7565b73ffffffffffffffffffffffffffffffffffffffff1614610a3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3290612b8e565b60405180910390fd5b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd360405160405180910390a260019050919050565b60066020528060005260406000206000915054906101000a900460ff1681565b610b07612219565b73ffffffffffffffffffffffffffffffffffffffff16610b256111f7565b73ffffffffffffffffffffffffffffffffffffffff1614610b7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7290612b8e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600260009054906101000a900460ff16610c8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8190612a8e565b60405180910390fd5b610ca98473ffffffffffffffffffffffffffffffffffffffff16612237565b610ce8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cdf90612c6e565b60405180910390fd5b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610d74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6b90612bee565b60405180910390fd5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610e6357600154341015610e0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0190612bae565b60405180910390fd5b6001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b600084905060008173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610ea793929190612990565b602060405180830381600087803b158015610ec157600080fd5b505af1158015610ed5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef99190612519565b905080610f3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3290612c0e565b60405180910390fd5b600260019054906101000a900460ff161561106057610fdf84600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461224a90919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8573ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f380818a686b3749c864e4fe5b344c0fd3e0681231881695473b42c2c84d7271d87878673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156110f757600080fd5b505afa15801561110b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111349190612583565b8773ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561117a57600080fd5b505afa15801561118e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b29190612629565b6040516111c29493929190612a3b565b60405180910390a36001925050509392505050565b60056020528060005260406000206000915054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061122a612219565b73ffffffffffffffffffffffffffffffffffffffff166112486111f7565b73ffffffffffffffffffffffffffffffffffffffff161461129e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129590612b8e565b60405180910390fd5b816002806101000a81548160ff02191690831515021790555060019050919050565b60015481565b60006112d0612219565b73ffffffffffffffffffffffffffffffffffffffff166112ee6111f7565b73ffffffffffffffffffffffffffffffffffffffff1614611344576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133b90612b8e565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86856040518363ffffffff1660e01b81526004016113819291906129c7565b602060405180830381600087803b15801561139b57600080fd5b505af11580156113af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d39190612519565b905080611415576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140c90612b6e565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff1660015460405161143b90612960565b60006040518083038185875af1925050503d8060008114611478576040519150601f19603f3d011682016040523d82523d6000602084013e61147d565b606091505b505080915050806114c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ba90612c8e565b60405180910390fd5b6000600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060019150509392505050565b6000600260009054906101000a900460ff16611578576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156f90612a8e565b60405180910390fd5b6000349050600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611687576000600154905080821015611618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160f90612aae565b60405180910390fd5b6001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611683818361222190919063ffffffff16565b9150505b600081116116ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c190612b0e565b60405180910390fd5b600260019054906101000a900460ff16156117755761173181600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461224a90919063ffffffff16565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b3373ffffffffffffffffffffffffffffffffffffffff167fa5ee847b808915e440e213630058643951dfa817cd585254162b8e69b71fa43284836040516117bd929190612a0b565b60405180910390a26001915050919050565b60006117d9612219565b73ffffffffffffffffffffffffffffffffffffffff166117f76111f7565b73ffffffffffffffffffffffffffffffffffffffff161461184d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161184490612b8e565b60405180910390fd5b81600260016101000a81548160ff02191690831515021790555060019050919050565b600061187a612219565b73ffffffffffffffffffffffffffffffffffffffff166118986111f7565b73ffffffffffffffffffffffffffffffffffffffff16146118ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e590612b8e565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff168360405161191490612960565b60006040518083038185875af1925050503d8060008114611951576040519150601f19603f3d011682016040523d82523d6000602084013e611956565b606091505b505090508061199a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199190612bce565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166001546040516119c090612960565b60006040518083038185875af1925050503d80600081146119fd576040519150601f19603f3d011682016040523d82523d6000602084013e611a02565b606091505b50508091505080611a48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3f90612c8e565b60405180910390fd5b6000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600191505092915050565b6000611ab5612219565b73ffffffffffffffffffffffffffffffffffffffff16611ad36111f7565b73ffffffffffffffffffffffffffffffffffffffff1614611b29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2090612b8e565b60405180910390fd5b81600260006101000a81548160ff02191690831515021790555060019050919050565b6004602052816000526040600020602052806000526040600020600091509150505481565b6000611b7b612219565b73ffffffffffffffffffffffffffffffffffffffff16611b996111f7565b73ffffffffffffffffffffffffffffffffffffffff1614611bef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be690612b8e565b60405180910390fd5b6001600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff167f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a460405160405180910390a260019050919050565b611c9b612219565b73ffffffffffffffffffffffffffffffffffffffff16611cb96111f7565b73ffffffffffffffffffffffffffffffffffffffff1614611d0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d0690612b8e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611d7f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7690612aee565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060028054906101000a900460ff16611e8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e8290612c2e565b60405180910390fd5b6000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080841115611f4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4690612cae565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33876040518363ffffffff1660e01b8152600401611f8c9291906129c7565b602060405180830381600087803b158015611fa657600080fd5b505af1158015611fba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fde9190612519565b905080612020576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201790612b2e565b60405180910390fd5b612033858361222190919063ffffffff16565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060019250505092915050565b60006120c9612219565b73ffffffffffffffffffffffffffffffffffffffff166120e76111f7565b73ffffffffffffffffffffffffffffffffffffffff161461213d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213490612b8e565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b815260040161217a9291906129c7565b602060405180830381600087803b15801561219457600080fd5b505af11580156121a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121cc9190612519565b90508061220e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220590612b4e565b60405180910390fd5b600191505092915050565b600033905090565b6000818361222f9190612dbc565b905092915050565b600080823b905060008111915050919050565b600081836122589190612d66565b905092915050565b600061227361226e84612d0e565b612ce9565b90508281526020810184848401111561228b57600080fd5b612296848285612e45565b509392505050565b60006122b16122ac84612d0e565b612ce9565b9050828152602081018484840111156122c957600080fd5b6122d4848285612e54565b509392505050565b6000813590506122eb81613388565b92915050565b6000813590506123008161339f565b92915050565b6000815190506123158161339f565b92915050565b600082601f83011261232c57600080fd5b813561233c848260208601612260565b91505092915050565b600082601f83011261235657600080fd5b815161236684826020860161229e565b91505092915050565b60008135905061237e816133b6565b92915050565b600081519050612393816133cd565b92915050565b6000602082840312156123ab57600080fd5b60006123b9848285016122dc565b91505092915050565b600080604083850312156123d557600080fd5b60006123e3858286016122dc565b92505060206123f4858286016122dc565b9150509250929050565b60008060006060848603121561241357600080fd5b6000612421868287016122dc565b9350506020612432868287016122dc565b92505060406124438682870161236f565b9150509250925092565b60008060006060848603121561246257600080fd5b6000612470868287016122dc565b935050602084013567ffffffffffffffff81111561248d57600080fd5b6124998682870161231b565b92505060406124aa8682870161236f565b9150509250925092565b600080604083850312156124c757600080fd5b60006124d5858286016122dc565b92505060206124e68582860161236f565b9150509250929050565b60006020828403121561250257600080fd5b6000612510848285016122f1565b91505092915050565b60006020828403121561252b57600080fd5b600061253984828501612306565b91505092915050565b60006020828403121561255457600080fd5b600082013567ffffffffffffffff81111561256e57600080fd5b61257a8482850161231b565b91505092915050565b60006020828403121561259557600080fd5b600082015167ffffffffffffffff8111156125af57600080fd5b6125bb84828501612345565b91505092915050565b6000602082840312156125d657600080fd5b60006125e48482850161236f565b91505092915050565b6000806040838503121561260057600080fd5b600061260e8582860161236f565b925050602061261f858286016122dc565b9150509250929050565b60006020828403121561263b57600080fd5b600061264984828501612384565b91505092915050565b61265b81612df0565b82525050565b61266a81612e02565b82525050565b600061267b82612d3f565b6126858185612d55565b9350612695818560208601612e54565b61269e81612f16565b840191505092915050565b60006126b6601d83612d55565b91506126c182612f27565b602082019050919050565b60006126d9602a83612d55565b91506126e482612f50565b604082019050919050565b60006126fc601f83612d55565b915061270782612f9f565b602082019050919050565b600061271f602683612d55565b915061272a82612fc8565b604082019050919050565b6000612742604583612d55565b915061274d82613017565b606082019050919050565b6000612765602083612d55565b91506127708261308c565b602082019050919050565b6000612788602283612d55565b9150612793826130b5565b604082019050919050565b60006127ab601283612d55565b91506127b682613104565b602082019050919050565b60006127ce602083612d55565b91506127d98261312d565b602082019050919050565b60006127f1602b83612d55565b91506127fc82613156565b604082019050919050565b6000612814602683612d55565b915061281f826131a5565b604082019050919050565b6000612837602583612d55565b9150612842826131f4565b604082019050919050565b600061285a601a83612d55565b915061286582613243565b602082019050919050565b600061287d600083612d4a565b91506128888261326c565b600082019050919050565b60006128a0602883612d55565b91506128ab8261326f565b604082019050919050565b60006128c3601883612d55565b91506128ce826132be565b602082019050919050565b60006128e6601d83612d55565b91506128f1826132e7565b602082019050919050565b6000612909602f83612d55565b915061291482613310565b604082019050919050565b600061292c601a83612d55565b91506129378261335f565b602082019050919050565b61294b81612e2e565b82525050565b61295a81612e38565b82525050565b600061296b82612870565b9150819050919050565b600060208201905061298a6000830184612652565b92915050565b60006060820190506129a56000830186612652565b6129b26020830185612652565b6129bf6040830184612942565b949350505050565b60006040820190506129dc6000830185612652565b6129e96020830184612942565b9392505050565b6000602082019050612a056000830184612661565b92915050565b60006040820190508181036000830152612a258185612670565b9050612a346020830184612942565b9392505050565b60006080820190508181036000830152612a558187612670565b9050612a646020830186612942565b8181036040830152612a768185612670565b9050612a856060830184612951565b95945050505050565b60006020820190508181036000830152612aa7816126a9565b9050919050565b60006020820190508181036000830152612ac7816126cc565b9050919050565b60006020820190508181036000830152612ae7816126ef565b9050919050565b60006020820190508181036000830152612b0781612712565b9050919050565b60006020820190508181036000830152612b2781612735565b9050919050565b60006020820190508181036000830152612b4781612758565b9050919050565b60006020820190508181036000830152612b678161277b565b9050919050565b60006020820190508181036000830152612b878161279e565b9050919050565b60006020820190508181036000830152612ba7816127c1565b9050919050565b60006020820190508181036000830152612bc7816127e4565b9050919050565b60006020820190508181036000830152612be781612807565b9050919050565b60006020820190508181036000830152612c078161282a565b9050919050565b60006020820190508181036000830152612c278161284d565b9050919050565b60006020820190508181036000830152612c4781612893565b9050919050565b60006020820190508181036000830152612c67816128b6565b9050919050565b60006020820190508181036000830152612c87816128d9565b9050919050565b60006020820190508181036000830152612ca7816128fc565b9050919050565b60006020820190508181036000830152612cc78161291f565b9050919050565b6000602082019050612ce36000830184612942565b92915050565b6000612cf3612d04565b9050612cff8282612e87565b919050565b6000604051905090565b600067ffffffffffffffff821115612d2957612d28612ee7565b5b612d3282612f16565b9050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000612d7182612e2e565b9150612d7c83612e2e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612db157612db0612eb8565b5b828201905092915050565b6000612dc782612e2e565b9150612dd283612e2e565b925082821015612de557612de4612eb8565b5b828203905092915050565b6000612dfb82612e0e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015612e72578082015181840152602081019050612e57565b83811115612e81576000848401525b50505050565b612e9082612f16565b810181811067ffffffffffffffff82111715612eaf57612eae612ee7565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4974206973206e6f7420616c6c6f77656420746f206465706f7369742e000000600082015250565b7f496e73756666696369656e742066756e647320746f206465706f73697420636f60008201527f6d70656e736174696f6e00000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f207472616e7366657220636c61696d6564204554482e00600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c69642076616c756520666f7220746865206465706f73697420616d60008201527f6f756e742c206661696c656420746f206465706f7369742061207a65726f207660208201527f616c75652e000000000000000000000000000000000000000000000000000000604082015250565b7f4661696c656420746f207472616e73666572206c6f636b65642045524332302e600082015250565b7f4661696c656420746f207472616e7366657220636c61696d656420616d6f756e60008201527f742e000000000000000000000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f20706179206261636b0000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f496e73756666696369656e742066756e647320666f72206465706f736974206360008201527f6f6d70656e736174696f6e000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f20706179206261636b20746865206465706f736974206160008201527f6d6f756e742e0000000000000000000000000000000000000000000000000000602082015250565b7f556e737570706f7274656420746f6b656e2c206661696c656420746f2064657060008201527f6f7369742e000000000000000000000000000000000000000000000000000000602082015250565b7f4661696c656420746f207472616e7366657220746f6b656e732e000000000000600082015250565b50565b7f4974206973206e6f7420616c6c6f77656420746f20636c61696d206c6f636b6560008201527f642066756e64732e000000000000000000000000000000000000000000000000602082015250565b7f496e73756666696369656e74206c6f636b6564204554482e0000000000000000600082015250565b7f476976656e20746f6b656e206973206e6f74206120636f6e7472616374000000600082015250565b7f4661696c656420746f207061792074686520636f6d70656e736174696f6e206660008201527f6f7220706179696e67206261636b2e0000000000000000000000000000000000602082015250565b7f496e73756666696369656e74206c6f636b65642045524332302e000000000000600082015250565b61339181612df0565b811461339c57600080fd5b50565b6133a881612e02565b81146133b357600080fd5b50565b6133bf81612e2e565b81146133ca57600080fd5b50565b6133d681612e38565b81146133e157600080fd5b5056fea26469706673582212202bbaa160b65cc93b8663c046a642aa6e772a58583e61eb9f4638f26d097efd3964736f6c63430008030033"

// DeployBridge deploys a new Ethereum contract, binding an instance of Bridge to it.
func DeployBridge(auth *bind.TransactOpts, backend bind.ContractBackend, _supportedTokens []common.Address, _refundFee *big.Int, _depositingAllowed bool, _lockingFundsAllowed bool, _claimingLockedFundsAllowed bool) (common.Address, *types.Transaction, *Bridge, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(BridgeBin), backend, _supportedTokens, _refundFee, _depositingAllowed, _lockingFundsAllowed, _claimingLockedFundsAllowed)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// Bridge is an auto generated Go binding around an Ethereum contract.
type Bridge struct {
	BridgeCaller     // Read-only binding to the contract
	BridgeTransactor // Write-only binding to the contract
	BridgeFilterer   // Log filterer for contract events
}

// BridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type BridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type BridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type BridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// BridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type BridgeSession struct {
	Contract     *Bridge           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type BridgeCallerSession struct {
	Contract *BridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// BridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type BridgeTransactorSession struct {
	Contract     *BridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// BridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type BridgeRaw struct {
	Contract *Bridge // Generic contract binding to access the raw methods on
}

// BridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type BridgeCallerRaw struct {
	Contract *BridgeCaller // Generic read-only contract binding to access the raw methods on
}

// BridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type BridgeTransactorRaw struct {
	Contract *BridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewBridge creates a new instance of Bridge, bound to a specific deployed contract.
func NewBridge(address common.Address, backend bind.ContractBackend) (*Bridge, error) {
	contract, err := bindBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Bridge{BridgeCaller: BridgeCaller{contract: contract}, BridgeTransactor: BridgeTransactor{contract: contract}, BridgeFilterer: BridgeFilterer{contract: contract}}, nil
}

// NewBridgeCaller creates a new read-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeCaller(address common.Address, caller bind.ContractCaller) (*BridgeCaller, error) {
	contract, err := bindBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeCaller{contract: contract}, nil
}

// NewBridgeTransactor creates a new write-only instance of Bridge, bound to a specific deployed contract.
func NewBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*BridgeTransactor, error) {
	contract, err := bindBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &BridgeTransactor{contract: contract}, nil
}

// NewBridgeFilterer creates a new log filterer instance of Bridge, bound to a specific deployed contract.
func NewBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*BridgeFilterer, error) {
	contract, err := bindBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &BridgeFilterer{contract: contract}, nil
}

// bindBridge binds a generic wrapper to an already deployed contract.
func bindBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(BridgeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.BridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.BridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Bridge *BridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Bridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Bridge *BridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Bridge *BridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Bridge.Contract.contract.Transact(opts, method, params...)
}

// LockedERC20 is a free data retrieval call binding the contract method 0xd35b7801.
//
// Solidity: function lockedERC20(address , address ) view returns(uint256)
func (_Bridge *BridgeCaller) LockedERC20(opts *bind.CallOpts, arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "lockedERC20", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LockedERC20 is a free data retrieval call binding the contract method 0xd35b7801.
//
// Solidity: function lockedERC20(address , address ) view returns(uint256)
func (_Bridge *BridgeSession) LockedERC20(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Bridge.Contract.LockedERC20(&_Bridge.CallOpts, arg0, arg1)
}

// LockedERC20 is a free data retrieval call binding the contract method 0xd35b7801.
//
// Solidity: function lockedERC20(address , address ) view returns(uint256)
func (_Bridge *BridgeCallerSession) LockedERC20(arg0 common.Address, arg1 common.Address) (*big.Int, error) {
	return _Bridge.Contract.LockedERC20(&_Bridge.CallOpts, arg0, arg1)
}

// LockedETH is a free data retrieval call binding the contract method 0x0d55f6b2.
//
// Solidity: function lockedETH(address ) view returns(uint256)
func (_Bridge *BridgeCaller) LockedETH(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "lockedETH", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LockedETH is a free data retrieval call binding the contract method 0x0d55f6b2.
//
// Solidity: function lockedETH(address ) view returns(uint256)
func (_Bridge *BridgeSession) LockedETH(arg0 common.Address) (*big.Int, error) {
	return _Bridge.Contract.LockedETH(&_Bridge.CallOpts, arg0)
}

// LockedETH is a free data retrieval call binding the contract method 0x0d55f6b2.
//
// Solidity: function lockedETH(address ) view returns(uint256)
func (_Bridge *BridgeCallerSession) LockedETH(arg0 common.Address) (*big.Int, error) {
	return _Bridge.Contract.LockedETH(&_Bridge.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeSession) Owner() (common.Address, error) {
	return _Bridge.Contract.Owner(&_Bridge.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Bridge *BridgeCallerSession) Owner() (common.Address, error) {
	return _Bridge.Contract.Owner(&_Bridge.CallOpts)
}

// RefundFee is a free data retrieval call binding the contract method 0x90fe6ddb.
//
// Solidity: function refundFee() view returns(uint256)
func (_Bridge *BridgeCaller) RefundFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "refundFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RefundFee is a free data retrieval call binding the contract method 0x90fe6ddb.
//
// Solidity: function refundFee() view returns(uint256)
func (_Bridge *BridgeSession) RefundFee() (*big.Int, error) {
	return _Bridge.Contract.RefundFee(&_Bridge.CallOpts)
}

// RefundFee is a free data retrieval call binding the contract method 0x90fe6ddb.
//
// Solidity: function refundFee() view returns(uint256)
func (_Bridge *BridgeCallerSession) RefundFee() (*big.Int, error) {
	return _Bridge.Contract.RefundFee(&_Bridge.CallOpts)
}

// RefundFeeDeposited is a free data retrieval call binding the contract method 0x84f5af34.
//
// Solidity: function refundFeeDeposited(address ) view returns(bool)
func (_Bridge *BridgeCaller) RefundFeeDeposited(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "refundFeeDeposited", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// RefundFeeDeposited is a free data retrieval call binding the contract method 0x84f5af34.
//
// Solidity: function refundFeeDeposited(address ) view returns(bool)
func (_Bridge *BridgeSession) RefundFeeDeposited(arg0 common.Address) (bool, error) {
	return _Bridge.Contract.RefundFeeDeposited(&_Bridge.CallOpts, arg0)
}

// RefundFeeDeposited is a free data retrieval call binding the contract method 0x84f5af34.
//
// Solidity: function refundFeeDeposited(address ) view returns(bool)
func (_Bridge *BridgeCallerSession) RefundFeeDeposited(arg0 common.Address) (bool, error) {
	return _Bridge.Contract.RefundFeeDeposited(&_Bridge.CallOpts, arg0)
}

// SupportedTokens is a free data retrieval call binding the contract method 0x68c4ac26.
//
// Solidity: function supportedTokens(address ) view returns(bool)
func (_Bridge *BridgeCaller) SupportedTokens(opts *bind.CallOpts, arg0 common.Address) (bool, error) {
	var out []interface{}
	err := _Bridge.contract.Call(opts, &out, "supportedTokens", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportedTokens is a free data retrieval call binding the contract method 0x68c4ac26.
//
// Solidity: function supportedTokens(address ) view returns(bool)
func (_Bridge *BridgeSession) SupportedTokens(arg0 common.Address) (bool, error) {
	return _Bridge.Contract.SupportedTokens(&_Bridge.CallOpts, arg0)
}

// SupportedTokens is a free data retrieval call binding the contract method 0x68c4ac26.
//
// Solidity: function supportedTokens(address ) view returns(bool)
func (_Bridge *BridgeCallerSession) SupportedTokens(arg0 common.Address) (bool, error) {
	return _Bridge.Contract.SupportedTokens(&_Bridge.CallOpts, arg0)
}

// AddToken is a paid mutator transaction binding the contract method 0xd48bfca7.
//
// Solidity: function addToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactor) AddToken(opts *bind.TransactOpts, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "addToken", _tokenAddress)
}

// AddToken is a paid mutator transaction binding the contract method 0xd48bfca7.
//
// Solidity: function addToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeSession) AddToken(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AddToken(&_Bridge.TransactOpts, _tokenAddress)
}

// AddToken is a paid mutator transaction binding the contract method 0xd48bfca7.
//
// Solidity: function addToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactorSession) AddToken(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.AddToken(&_Bridge.TransactOpts, _tokenAddress)
}

// ClaimContractERC20 is a paid mutator transaction binding the contract method 0xfe0dde62.
//
// Solidity: function claimContractERC20(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactor) ClaimContractERC20(opts *bind.TransactOpts, _claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claimContractERC20", _claimableAmount, _tokenAddress)
}

// ClaimContractERC20 is a paid mutator transaction binding the contract method 0xfe0dde62.
//
// Solidity: function claimContractERC20(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeSession) ClaimContractERC20(_claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimContractERC20(&_Bridge.TransactOpts, _claimableAmount, _tokenAddress)
}

// ClaimContractERC20 is a paid mutator transaction binding the contract method 0xfe0dde62.
//
// Solidity: function claimContractERC20(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactorSession) ClaimContractERC20(_claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimContractERC20(&_Bridge.TransactOpts, _claimableAmount, _tokenAddress)
}

// ClaimContractETH is a paid mutator transaction binding the contract method 0x3155c58a.
//
// Solidity: function claimContractETH(uint256 _claimableAmount) returns(bool)
func (_Bridge *BridgeTransactor) ClaimContractETH(opts *bind.TransactOpts, _claimableAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claimContractETH", _claimableAmount)
}

// ClaimContractETH is a paid mutator transaction binding the contract method 0x3155c58a.
//
// Solidity: function claimContractETH(uint256 _claimableAmount) returns(bool)
func (_Bridge *BridgeSession) ClaimContractETH(_claimableAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimContractETH(&_Bridge.TransactOpts, _claimableAmount)
}

// ClaimContractETH is a paid mutator transaction binding the contract method 0x3155c58a.
//
// Solidity: function claimContractETH(uint256 _claimableAmount) returns(bool)
func (_Bridge *BridgeTransactorSession) ClaimContractETH(_claimableAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimContractETH(&_Bridge.TransactOpts, _claimableAmount)
}

// ClaimLockedERC20 is a paid mutator transaction binding the contract method 0xf99f28ee.
//
// Solidity: function claimLockedERC20(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactor) ClaimLockedERC20(opts *bind.TransactOpts, _claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claimLockedERC20", _claimableAmount, _tokenAddress)
}

// ClaimLockedERC20 is a paid mutator transaction binding the contract method 0xf99f28ee.
//
// Solidity: function claimLockedERC20(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeSession) ClaimLockedERC20(_claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimLockedERC20(&_Bridge.TransactOpts, _claimableAmount, _tokenAddress)
}

// ClaimLockedERC20 is a paid mutator transaction binding the contract method 0xf99f28ee.
//
// Solidity: function claimLockedERC20(uint256 _claimableAmount, address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactorSession) ClaimLockedERC20(_claimableAmount *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimLockedERC20(&_Bridge.TransactOpts, _claimableAmount, _tokenAddress)
}

// ClaimLockedETH is a paid mutator transaction binding the contract method 0x49ca86d5.
//
// Solidity: function claimLockedETH(uint256 _claimableAmount) returns(bool)
func (_Bridge *BridgeTransactor) ClaimLockedETH(opts *bind.TransactOpts, _claimableAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "claimLockedETH", _claimableAmount)
}

// ClaimLockedETH is a paid mutator transaction binding the contract method 0x49ca86d5.
//
// Solidity: function claimLockedETH(uint256 _claimableAmount) returns(bool)
func (_Bridge *BridgeSession) ClaimLockedETH(_claimableAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimLockedETH(&_Bridge.TransactOpts, _claimableAmount)
}

// ClaimLockedETH is a paid mutator transaction binding the contract method 0x49ca86d5.
//
// Solidity: function claimLockedETH(uint256 _claimableAmount) returns(bool)
func (_Bridge *BridgeTransactorSession) ClaimLockedETH(_claimableAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.ClaimLockedETH(&_Bridge.TransactOpts, _claimableAmount)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x7288f11a.
//
// Solidity: function depositERC20(address _tokenAddress, string _odinAddress, uint256 _depositAmount) payable returns(bool)
func (_Bridge *BridgeTransactor) DepositERC20(opts *bind.TransactOpts, _tokenAddress common.Address, _odinAddress string, _depositAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "depositERC20", _tokenAddress, _odinAddress, _depositAmount)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x7288f11a.
//
// Solidity: function depositERC20(address _tokenAddress, string _odinAddress, uint256 _depositAmount) payable returns(bool)
func (_Bridge *BridgeSession) DepositERC20(_tokenAddress common.Address, _odinAddress string, _depositAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.DepositERC20(&_Bridge.TransactOpts, _tokenAddress, _odinAddress, _depositAmount)
}

// DepositERC20 is a paid mutator transaction binding the contract method 0x7288f11a.
//
// Solidity: function depositERC20(address _tokenAddress, string _odinAddress, uint256 _depositAmount) payable returns(bool)
func (_Bridge *BridgeTransactorSession) DepositERC20(_tokenAddress common.Address, _odinAddress string, _depositAmount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.DepositERC20(&_Bridge.TransactOpts, _tokenAddress, _odinAddress, _depositAmount)
}

// DepositETH is a paid mutator transaction binding the contract method 0x9b1c48e6.
//
// Solidity: function depositETH(string _odinAddress) payable returns(bool)
func (_Bridge *BridgeTransactor) DepositETH(opts *bind.TransactOpts, _odinAddress string) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "depositETH", _odinAddress)
}

// DepositETH is a paid mutator transaction binding the contract method 0x9b1c48e6.
//
// Solidity: function depositETH(string _odinAddress) payable returns(bool)
func (_Bridge *BridgeSession) DepositETH(_odinAddress string) (*types.Transaction, error) {
	return _Bridge.Contract.DepositETH(&_Bridge.TransactOpts, _odinAddress)
}

// DepositETH is a paid mutator transaction binding the contract method 0x9b1c48e6.
//
// Solidity: function depositETH(string _odinAddress) payable returns(bool)
func (_Bridge *BridgeTransactorSession) DepositETH(_odinAddress string) (*types.Transaction, error) {
	return _Bridge.Contract.DepositETH(&_Bridge.TransactOpts, _odinAddress)
}

// PayBackERC20 is a paid mutator transaction binding the contract method 0x9371388d.
//
// Solidity: function payBackERC20(address _user, address _tokenAddress, uint256 _amount) returns(bool)
func (_Bridge *BridgeTransactor) PayBackERC20(opts *bind.TransactOpts, _user common.Address, _tokenAddress common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "payBackERC20", _user, _tokenAddress, _amount)
}

// PayBackERC20 is a paid mutator transaction binding the contract method 0x9371388d.
//
// Solidity: function payBackERC20(address _user, address _tokenAddress, uint256 _amount) returns(bool)
func (_Bridge *BridgeSession) PayBackERC20(_user common.Address, _tokenAddress common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.PayBackERC20(&_Bridge.TransactOpts, _user, _tokenAddress, _amount)
}

// PayBackERC20 is a paid mutator transaction binding the contract method 0x9371388d.
//
// Solidity: function payBackERC20(address _user, address _tokenAddress, uint256 _amount) returns(bool)
func (_Bridge *BridgeTransactorSession) PayBackERC20(_user common.Address, _tokenAddress common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.PayBackERC20(&_Bridge.TransactOpts, _user, _tokenAddress, _amount)
}

// PayBackETH is a paid mutator transaction binding the contract method 0xc7b77eb0.
//
// Solidity: function payBackETH(address _user, uint256 _amount) returns(bool)
func (_Bridge *BridgeTransactor) PayBackETH(opts *bind.TransactOpts, _user common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "payBackETH", _user, _amount)
}

// PayBackETH is a paid mutator transaction binding the contract method 0xc7b77eb0.
//
// Solidity: function payBackETH(address _user, uint256 _amount) returns(bool)
func (_Bridge *BridgeSession) PayBackETH(_user common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.PayBackETH(&_Bridge.TransactOpts, _user, _amount)
}

// PayBackETH is a paid mutator transaction binding the contract method 0xc7b77eb0.
//
// Solidity: function payBackETH(address _user, uint256 _amount) returns(bool)
func (_Bridge *BridgeTransactorSession) PayBackETH(_user common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.PayBackETH(&_Bridge.TransactOpts, _user, _amount)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactor) RemoveToken(opts *bind.TransactOpts, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "removeToken", _tokenAddress)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeSession) RemoveToken(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RemoveToken(&_Bridge.TransactOpts, _tokenAddress)
}

// RemoveToken is a paid mutator transaction binding the contract method 0x5fa7b584.
//
// Solidity: function removeToken(address _tokenAddress) returns(bool)
func (_Bridge *BridgeTransactorSession) RemoveToken(_tokenAddress common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.RemoveToken(&_Bridge.TransactOpts, _tokenAddress)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bridge.Contract.RenounceOwnership(&_Bridge.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Bridge *BridgeTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Bridge.Contract.RenounceOwnership(&_Bridge.TransactOpts)
}

// SetAllowanceToClaimLockedFunds is a paid mutator transaction binding the contract method 0x8ef37c48.
//
// Solidity: function setAllowanceToClaimLockedFunds(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactor) SetAllowanceToClaimLockedFunds(opts *bind.TransactOpts, _allowed bool) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setAllowanceToClaimLockedFunds", _allowed)
}

// SetAllowanceToClaimLockedFunds is a paid mutator transaction binding the contract method 0x8ef37c48.
//
// Solidity: function setAllowanceToClaimLockedFunds(bool _allowed) returns(bool)
func (_Bridge *BridgeSession) SetAllowanceToClaimLockedFunds(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToClaimLockedFunds(&_Bridge.TransactOpts, _allowed)
}

// SetAllowanceToClaimLockedFunds is a paid mutator transaction binding the contract method 0x8ef37c48.
//
// Solidity: function setAllowanceToClaimLockedFunds(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactorSession) SetAllowanceToClaimLockedFunds(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToClaimLockedFunds(&_Bridge.TransactOpts, _allowed)
}

// SetAllowanceToDeposit is a paid mutator transaction binding the contract method 0xd0fd1de1.
//
// Solidity: function setAllowanceToDeposit(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactor) SetAllowanceToDeposit(opts *bind.TransactOpts, _allowed bool) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setAllowanceToDeposit", _allowed)
}

// SetAllowanceToDeposit is a paid mutator transaction binding the contract method 0xd0fd1de1.
//
// Solidity: function setAllowanceToDeposit(bool _allowed) returns(bool)
func (_Bridge *BridgeSession) SetAllowanceToDeposit(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToDeposit(&_Bridge.TransactOpts, _allowed)
}

// SetAllowanceToDeposit is a paid mutator transaction binding the contract method 0xd0fd1de1.
//
// Solidity: function setAllowanceToDeposit(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactorSession) SetAllowanceToDeposit(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToDeposit(&_Bridge.TransactOpts, _allowed)
}

// SetAllowanceToLock is a paid mutator transaction binding the contract method 0xa8d275cc.
//
// Solidity: function setAllowanceToLock(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactor) SetAllowanceToLock(opts *bind.TransactOpts, _allowed bool) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setAllowanceToLock", _allowed)
}

// SetAllowanceToLock is a paid mutator transaction binding the contract method 0xa8d275cc.
//
// Solidity: function setAllowanceToLock(bool _allowed) returns(bool)
func (_Bridge *BridgeSession) SetAllowanceToLock(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToLock(&_Bridge.TransactOpts, _allowed)
}

// SetAllowanceToLock is a paid mutator transaction binding the contract method 0xa8d275cc.
//
// Solidity: function setAllowanceToLock(bool _allowed) returns(bool)
func (_Bridge *BridgeTransactorSession) SetAllowanceToLock(_allowed bool) (*types.Transaction, error) {
	return _Bridge.Contract.SetAllowanceToLock(&_Bridge.TransactOpts, _allowed)
}

// SetRefundFee is a paid mutator transaction binding the contract method 0x36fd711e.
//
// Solidity: function setRefundFee(uint256 _refundFee) returns(bool)
func (_Bridge *BridgeTransactor) SetRefundFee(opts *bind.TransactOpts, _refundFee *big.Int) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "setRefundFee", _refundFee)
}

// SetRefundFee is a paid mutator transaction binding the contract method 0x36fd711e.
//
// Solidity: function setRefundFee(uint256 _refundFee) returns(bool)
func (_Bridge *BridgeSession) SetRefundFee(_refundFee *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.SetRefundFee(&_Bridge.TransactOpts, _refundFee)
}

// SetRefundFee is a paid mutator transaction binding the contract method 0x36fd711e.
//
// Solidity: function setRefundFee(uint256 _refundFee) returns(bool)
func (_Bridge *BridgeTransactorSession) SetRefundFee(_refundFee *big.Int) (*types.Transaction, error) {
	return _Bridge.Contract.SetRefundFee(&_Bridge.TransactOpts, _refundFee)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOwnership(&_Bridge.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Bridge *BridgeTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Bridge.Contract.TransferOwnership(&_Bridge.TransactOpts, newOwner)
}

// BridgeERC20DepositedIterator is returned from FilterERC20Deposited and is used to iterate over the raw logs and unpacked data for ERC20Deposited events raised by the Bridge contract.
type BridgeERC20DepositedIterator struct {
	Event *BridgeERC20Deposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeERC20DepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeERC20Deposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeERC20Deposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeERC20DepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeERC20DepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeERC20Deposited represents a ERC20Deposited event raised by the Bridge contract.
type BridgeERC20Deposited struct {
	UserAddress    common.Address
	OdinAddress    string
	DepositAmount  *big.Int
	TokenAddress   common.Address
	Symbol         string
	TokenPrecision uint8
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterERC20Deposited is a free log retrieval operation binding the contract event 0x380818a686b3749c864e4fe5b344c0fd3e0681231881695473b42c2c84d7271d.
//
// Solidity: event ERC20Deposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount, address indexed _tokenAddress, string _symbol, uint8 _tokenPrecision)
func (_Bridge *BridgeFilterer) FilterERC20Deposited(opts *bind.FilterOpts, _userAddress []common.Address, _tokenAddress []common.Address) (*BridgeERC20DepositedIterator, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ERC20Deposited", _userAddressRule, _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeERC20DepositedIterator{contract: _Bridge.contract, event: "ERC20Deposited", logs: logs, sub: sub}, nil
}

// WatchERC20Deposited is a free log subscription operation binding the contract event 0x380818a686b3749c864e4fe5b344c0fd3e0681231881695473b42c2c84d7271d.
//
// Solidity: event ERC20Deposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount, address indexed _tokenAddress, string _symbol, uint8 _tokenPrecision)
func (_Bridge *BridgeFilterer) WatchERC20Deposited(opts *bind.WatchOpts, sink chan<- *BridgeERC20Deposited, _userAddress []common.Address, _tokenAddress []common.Address) (event.Subscription, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ERC20Deposited", _userAddressRule, _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeERC20Deposited)
				if err := _Bridge.contract.UnpackLog(event, "ERC20Deposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseERC20Deposited is a log parse operation binding the contract event 0x380818a686b3749c864e4fe5b344c0fd3e0681231881695473b42c2c84d7271d.
//
// Solidity: event ERC20Deposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount, address indexed _tokenAddress, string _symbol, uint8 _tokenPrecision)
func (_Bridge *BridgeFilterer) ParseERC20Deposited(log types.Log) (*BridgeERC20Deposited, error) {
	event := new(BridgeERC20Deposited)
	if err := _Bridge.contract.UnpackLog(event, "ERC20Deposited", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeETHDepositedIterator is returned from FilterETHDeposited and is used to iterate over the raw logs and unpacked data for ETHDeposited events raised by the Bridge contract.
type BridgeETHDepositedIterator struct {
	Event *BridgeETHDeposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeETHDepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeETHDeposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeETHDeposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeETHDepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeETHDepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeETHDeposited represents a ETHDeposited event raised by the Bridge contract.
type BridgeETHDeposited struct {
	UserAddress   common.Address
	OdinAddress   string
	DepositAmount *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterETHDeposited is a free log retrieval operation binding the contract event 0xa5ee847b808915e440e213630058643951dfa817cd585254162b8e69b71fa432.
//
// Solidity: event ETHDeposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount)
func (_Bridge *BridgeFilterer) FilterETHDeposited(opts *bind.FilterOpts, _userAddress []common.Address) (*BridgeETHDepositedIterator, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "ETHDeposited", _userAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeETHDepositedIterator{contract: _Bridge.contract, event: "ETHDeposited", logs: logs, sub: sub}, nil
}

// WatchETHDeposited is a free log subscription operation binding the contract event 0xa5ee847b808915e440e213630058643951dfa817cd585254162b8e69b71fa432.
//
// Solidity: event ETHDeposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount)
func (_Bridge *BridgeFilterer) WatchETHDeposited(opts *bind.WatchOpts, sink chan<- *BridgeETHDeposited, _userAddress []common.Address) (event.Subscription, error) {

	var _userAddressRule []interface{}
	for _, _userAddressItem := range _userAddress {
		_userAddressRule = append(_userAddressRule, _userAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "ETHDeposited", _userAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeETHDeposited)
				if err := _Bridge.contract.UnpackLog(event, "ETHDeposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseETHDeposited is a log parse operation binding the contract event 0xa5ee847b808915e440e213630058643951dfa817cd585254162b8e69b71fa432.
//
// Solidity: event ETHDeposited(address indexed _userAddress, string _odinAddress, uint256 _depositAmount)
func (_Bridge *BridgeFilterer) ParseETHDeposited(log types.Log) (*BridgeETHDeposited, error) {
	event := new(BridgeETHDeposited)
	if err := _Bridge.contract.UnpackLog(event, "ETHDeposited", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Bridge contract.
type BridgeOwnershipTransferredIterator struct {
	Event *BridgeOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeOwnershipTransferred represents a OwnershipTransferred event raised by the Bridge contract.
type BridgeOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*BridgeOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &BridgeOwnershipTransferredIterator{contract: _Bridge.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *BridgeOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeOwnershipTransferred)
				if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Bridge *BridgeFilterer) ParseOwnershipTransferred(log types.Log) (*BridgeOwnershipTransferred, error) {
	event := new(BridgeOwnershipTransferred)
	if err := _Bridge.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTokenAddedIterator is returned from FilterTokenAdded and is used to iterate over the raw logs and unpacked data for TokenAdded events raised by the Bridge contract.
type BridgeTokenAddedIterator struct {
	Event *BridgeTokenAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTokenAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTokenAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTokenAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTokenAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTokenAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTokenAdded represents a TokenAdded event raised by the Bridge contract.
type BridgeTokenAdded struct {
	TokenAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterTokenAdded is a free log retrieval operation binding the contract event 0x784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a4.
//
// Solidity: event TokenAdded(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) FilterTokenAdded(opts *bind.FilterOpts, _tokenAddress []common.Address) (*BridgeTokenAddedIterator, error) {

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "TokenAdded", _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeTokenAddedIterator{contract: _Bridge.contract, event: "TokenAdded", logs: logs, sub: sub}, nil
}

// WatchTokenAdded is a free log subscription operation binding the contract event 0x784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a4.
//
// Solidity: event TokenAdded(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) WatchTokenAdded(opts *bind.WatchOpts, sink chan<- *BridgeTokenAdded, _tokenAddress []common.Address) (event.Subscription, error) {

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "TokenAdded", _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTokenAdded)
				if err := _Bridge.contract.UnpackLog(event, "TokenAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenAdded is a log parse operation binding the contract event 0x784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a4.
//
// Solidity: event TokenAdded(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) ParseTokenAdded(log types.Log) (*BridgeTokenAdded, error) {
	event := new(BridgeTokenAdded)
	if err := _Bridge.contract.UnpackLog(event, "TokenAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// BridgeTokenRemovedIterator is returned from FilterTokenRemoved and is used to iterate over the raw logs and unpacked data for TokenRemoved events raised by the Bridge contract.
type BridgeTokenRemovedIterator struct {
	Event *BridgeTokenRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *BridgeTokenRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(BridgeTokenRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(BridgeTokenRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *BridgeTokenRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *BridgeTokenRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// BridgeTokenRemoved represents a TokenRemoved event raised by the Bridge contract.
type BridgeTokenRemoved struct {
	TokenAddress common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterTokenRemoved is a free log retrieval operation binding the contract event 0x4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3.
//
// Solidity: event TokenRemoved(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) FilterTokenRemoved(opts *bind.FilterOpts, _tokenAddress []common.Address) (*BridgeTokenRemovedIterator, error) {

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.FilterLogs(opts, "TokenRemoved", _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return &BridgeTokenRemovedIterator{contract: _Bridge.contract, event: "TokenRemoved", logs: logs, sub: sub}, nil
}

// WatchTokenRemoved is a free log subscription operation binding the contract event 0x4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3.
//
// Solidity: event TokenRemoved(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) WatchTokenRemoved(opts *bind.WatchOpts, sink chan<- *BridgeTokenRemoved, _tokenAddress []common.Address) (event.Subscription, error) {

	var _tokenAddressRule []interface{}
	for _, _tokenAddressItem := range _tokenAddress {
		_tokenAddressRule = append(_tokenAddressRule, _tokenAddressItem)
	}

	logs, sub, err := _Bridge.contract.WatchLogs(opts, "TokenRemoved", _tokenAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(BridgeTokenRemoved)
				if err := _Bridge.contract.UnpackLog(event, "TokenRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTokenRemoved is a log parse operation binding the contract event 0x4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3.
//
// Solidity: event TokenRemoved(address indexed _tokenAddress)
func (_Bridge *BridgeFilterer) ParseTokenRemoved(log types.Log) (*BridgeTokenRemoved, error) {
	event := new(BridgeTokenRemoved)
	if err := _Bridge.contract.UnpackLog(event, "TokenRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
